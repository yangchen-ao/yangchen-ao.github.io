<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="https://xiaowog.top/atom.xml" rel="self"/>
  
  <link href="https://xiaowog.top/"/>
  <updated>2022-02-25T06:36:08.295Z</updated>
  <id>https://xiaowog.top/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>anaconda问题</title>
    <link href="https://xiaowog.top/2022/02/25/anaconda%E9%97%AE%E9%A2%98/"/>
    <id>https://xiaowog.top/2022/02/25/anaconda%E9%97%AE%E9%A2%98/</id>
    <published>2022-02-25T04:17:11.000Z</published>
    <updated>2022-02-25T06:36:08.295Z</updated>
    
    <content type="html"><![CDATA[<h3 id="annconda的Jupyter如何修改默认文件夹的位置"><a href="#annconda的Jupyter如何修改默认文件夹的位置" class="headerlink" title="annconda的Jupyter如何修改默认文件夹的位置"></a>annconda的Jupyter如何修改默认文件夹的位置</h3><p>如图所示，打开<code>D:\anaconda\pkgs\_ipyw_jlab_nb_ext_conf-0.1.0-py39haa95532_0\etc\jupyter</code>的jupyter_notebook_config.json文件</p><p><img lazyload src="/images/loading.svg" data-src="01.png" alt="01"></p><p>输入如下代码，<code>E;\\pycode</code>为默认文件夹路径</p><p><img lazyload src="/images/loading.svg" data-src="02.png" alt="02"></p><p>然后在下面的文件夹里右击Jupyter快捷方式，打开属性</p><p><img lazyload src="/images/loading.svg" data-src="03.png" alt="03"></p><p>删除目标里两个%括起来的东西（包括%）和起始位置里的内容</p><p><img lazyload src="/images/loading.svg" data-src="04.png" alt="04"></p><h3 id="anaconda的Jupyter无法自动弹出浏览器"><a href="#anaconda的Jupyter无法自动弹出浏览器" class="headerlink" title="anaconda的Jupyter无法自动弹出浏览器"></a>anaconda的Jupyter无法自动弹出浏览器</h3><p>通过win+R打开cmd，输入<code>jupyter notebook --generate-config</code>，如果在安装时未将Anconda加入到系统环境变量中，执行该命令会报错。然后输入y，得到了配置文件及其所在的文件夹。</p><p><img lazyload src="/images/loading.svg" data-src="05.png" alt="05"></p><p>复制文件位置打开，</p><p><img lazyload src="/images/loading.svg" data-src="06.png" alt="06"></p><p>找到<code>c.NotebookApp.browser = &#39;&#39;</code>这行，</p><p><img lazyload src="/images/loading.svg" data-src="07.png" alt="07"></p><p>修改为下面的代码：下面以chorme浏览器为例(其他浏览器同，但不要出现中文文件名)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import webbrowser</span><br><span class="line">webbrowser.register(&quot;chrome&quot;,None,webbrowser.GenericBrowser(r&quot;&quot;C:\Program Files\Google\Chrome\Application\chrome.exe&quot;&quot;))</span><br><span class="line">c.NotebookApp.browser = &#x27;chrome&#x27;</span><br></pre></td></tr></table></figure><p>其中<code>&quot;C:\Program Files\Google\Chrome\Application\chrome.exe&quot;</code>为你浏览器文件的地址，可以通过下面方式找到文件位置：</p><p><img lazyload src="/images/loading.svg" data-src="08.png" alt="08"></p><p><img lazyload src="/images/loading.svg" data-src="09.png" alt="09"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;annconda的Jupyter如何修改默认文件夹的位置&quot;&gt;&lt;a href=&quot;#annconda的Jupyter如何修改默认文件夹的位置&quot; class=&quot;headerlink&quot; title=&quot;annconda的Jupyter如何修改默认文件夹的位置&quot;&gt;&lt;/a&gt;an</summary>
      
    
    
    
    
    <category term="anaconda" scheme="https://xiaowog.top/tags/anaconda/"/>
    
  </entry>
  
  <entry>
    <title>python基础第9课-函数</title>
    <link href="https://xiaowog.top/2022/02/24/python%E5%9F%BA%E7%A1%80%E7%AC%AC9%E8%AF%BE-%E5%87%BD%E6%95%B0/"/>
    <id>https://xiaowog.top/2022/02/24/python%E5%9F%BA%E7%A1%80%E7%AC%AC9%E8%AF%BE-%E5%87%BD%E6%95%B0/</id>
    <published>2022-02-23T23:50:17.000Z</published>
    <updated>2022-02-24T14:07:51.634Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h3><p>函数可重复使用，用来实现相关联功能的代码段。函数能提高程序的模块性、代码的重复利用率。Python函数分两类，即内建函数，自定义函数。例如，print就是一个输出计算结果的函数，除了系统内置的函数之外，程序员还可以根据需要编写自己的函数。</p><h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><p>函数定义非常简单，使用def关键字即可创建一个函数。函数在使用前必须定义，其语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def 函数名 ([参数 1,参数 2…]):</span><br><span class="line">    代码</span><br><span class="line">    [return 表达式]</span><br></pre></td></tr></table></figure><ul><li>函数名的命名规范和变量的定义规则相同。</li><li>函数的参数放在一对圆括号内，参数可以是一个，多个或零个，参数之间必须通过逗号间隔，这种参数称为形式参数。</li><li>括号后面以冒号结尾，冒号的下面就是函数的主体。</li><li>返回值不是必须的</li></ul><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def print_info():</span><br><span class="line">print(&#x27;我叫小薛,今年 18 岁，是一名大学生&#x27;)</span><br></pre></td></tr></table></figure><p>好了，我们已经定义了一个函数，那么接下来我们来完成函数的调用。</p><h4 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h4><p>函数的调用采用函数名加一对圆括号的方式，圆括号中的参数是传递给函数的具体值。函数调用的语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(实参 1,实参 2…)</span><br></pre></td></tr></table></figure><p>注意：即使函数不需要参数，调用函数时候，也要在函数名后使用一对空的圆括号</p><p>例如：</p><pre><code>def print_info():    print(&#39;我叫小薛,今年 18 岁，是一名大学生&#39;)print_info()</code></pre><p>上述程序虽然达到了效果，但是并不够灵活，如果想要在打印另一个人（李四）的个人信息，就需要去上面去修改源码，这样的话会非常麻烦的，因此在定义的时候可以让函数接收数据，这样的话就使程序变得比较灵活，就能达到想要的效果。</p><h4 id="函数的形参与实参"><a href="#函数的形参与实参" class="headerlink" title="函数的形参与实参"></a>函数的形参与实参</h4><p>在def语句中函数名后面圆括号中的参数称为形参，而调用函数时指定的参数称为实参。</p><p>下面实现，定义参数完成自我介绍：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#定义函数 </span><br><span class="line">def print_info(name,age): </span><br><span class="line">    print(&#x27;我叫&#123;0&#125;,今年&#123;1&#125;岁，是一名大学生&#x27;.format(name,age))</span><br><span class="line"></span><br><span class="line">#调用函数 </span><br><span class="line">print_info(&#x27;李四&#x27;,19)</span><br></pre></td></tr></table></figure><p>在上面的程序中，name 和 age 称为“形式参数”，简称“形参”。在调用函数printInfo(‘李四’,19)时，传递的’李四’和 19 称为“实际参数”，简称“实参”。</p><h4 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h4><p>函数的返回使用 return 语句，return 的后面可以是变量或者表达式。</p><p>例如，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#定义函数计算两数之和 </span><br><span class="line">def add(a,b): </span><br><span class="line">    return a+b </span><br><span class="line">#调用函数 </span><br><span class="line">sum=add(20,30) </span><br><span class="line">print(&#x27;两数的和:&#x27;,sum)</span><br></pre></td></tr></table></figure><p>通过函数参数传入斐波那切数列长度，使用 return 语句返回计算结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#通过函数参数传入斐波那切数列长度，使用 return 语句返回计算结果</span><br><span class="line">#定义函数</span><br><span class="line">def fibs(n): #n 代码斐波那切数列的长度</span><br><span class="line">    #定义斐波那切数列的初识列表 </span><br><span class="line">    result=[0,1]</span><br><span class="line">#通过循环计算，将结果添加到列表中 </span><br><span class="line">    for x in range(n-2): </span><br><span class="line">        result.append(result[-1]+result[-2]) </span><br><span class="line">    #将计算结果返回 </span><br><span class="line">    return result </span><br><span class="line">#调用函数 </span><br><span class="line">re=fibs(10) </span><br><span class="line">print(&#x27;斐波那切数列:&#x27;,re)</span><br></pre></td></tr></table></figure><h4 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h4><p>注释尽管在程序中不是必需的，但却是必要的。如果没有注释，那么程序就很难被别人读懂，甚至过段时间，自己都看不明白自己编写的程序。</p><p>Python 语言支持单行注释和多行注释，其中单行注释使用“#”表示，多行注释使用三个单引号或三个双引号将注释内容括起来。</p><p>对于函数来说，还可以使用另外一种注释：文档注释，也有人成为“函数的注释”。文档注释，需要在函数头(包含 def 关键字的那一行)的下一行用三个单引号或者三个双引号来实现，中间可以加入多行文字进行说明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def add(a,b): </span><br><span class="line">&quot;&quot;&quot;定义函数计算两数之和 &quot;&quot;&quot;</span><br><span class="line">    return a+b </span><br><span class="line">#调用函数 </span><br><span class="line">sum=add(20,30) </span><br><span class="line">print(&#x27;两数的和:&#x27;,sum)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;函数基础&quot;&gt;&lt;a href=&quot;#函数基础&quot; class=&quot;headerlink&quot; title=&quot;函数基础&quot;&gt;&lt;/a&gt;函数基础&lt;/h3&gt;&lt;p&gt;函数可重复使用，用来实现相关联功能的代码段。函数能提高程序的模块性、代码的重复利用率。Python函数分两类，即内建函数，自</summary>
      
    
    
    
    
    <category term="python基础" scheme="https://xiaowog.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python基础第8课-集合</title>
    <link href="https://xiaowog.top/2022/02/20/python%E5%9F%BA%E7%A1%80%E7%AC%AC8%E8%AF%BE-%E9%9B%86%E5%90%88/"/>
    <id>https://xiaowog.top/2022/02/20/python%E5%9F%BA%E7%A1%80%E7%AC%AC8%E8%AF%BE-%E9%9B%86%E5%90%88/</id>
    <published>2022-02-20T05:04:20.000Z</published>
    <updated>2022-02-20T07:31:41.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="集合（set）"><a href="#集合（set）" class="headerlink" title="集合（set）"></a>集合（set）</h3><p>Python中的集合跟数学上的集合是一致的，不允许有重复元素，而且可以进行交集、并集、差集等运算。</p><h4 id="集合创建"><a href="#集合创建" class="headerlink" title="集合创建"></a>集合创建</h4><h5 id="使用-创建集合对象"><a href="#使用-创建集合对象" class="headerlink" title="使用{}创建集合对象"></a>使用{}创建集合对象</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;3,5,7&#125; #集合存储整数 </span><br><span class="line">b=&#123;&#x27;hello&#x27;,&#x27;python&#x27;&#125; #集合存储字符串 </span><br><span class="line">c=&#123;3,4,True,&#x27;abc&#x27;,56.4&#125; #集合存储不同类型的数据 </span><br><span class="line">print(a) </span><br><span class="line">print(b) </span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><h5 id="使用-set-创建集合对象"><a href="#使用-set-创建集合对象" class="headerlink" title="使用 set()创建集合对象"></a>使用 set()创建集合对象</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;b&#x27;]</span><br><span class="line">b=set(a) #将列表转换为集合</span><br><span class="line">print(b)</span><br><span class="line">c=(1,2,3,4,5) </span><br><span class="line">d=set(c) #将元组转换为集合 </span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><h5 id="使用推导式创建集合对象"><a href="#使用推导式创建集合对象" class="headerlink" title="使用推导式创建集合对象"></a>使用推导式创建集合对象</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;num for num in range(1, 100) if num % 3 == 0 or num % 5 == 0&#125; #推导式也可以用于推导集合</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h4 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h4><h5 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;3,5,7&#125; </span><br><span class="line">a.add(&#x27;hello&#x27;) #add 方法添加元素 </span><br><span class="line">print(a)</span><br><span class="line">a.update([11, 17])</span><br><span class="line">a.update(&#x27;world&#x27;) #update会把元素拆分再添加进去</span><br></pre></td></tr></table></figure><h5 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h5><p>使用 remove()，discard()实现集合删除指定元素、pop()实现删除并返回指定元素，clear()清空整个集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;10,20,30,40,50&#125; </span><br><span class="line">a.remove(20) #删除集合中的元素，如果没有则报错</span><br><span class="line">print(a) </span><br><span class="line">a.discard(30)</span><br><span class="line">print(a) </span><br><span class="line">print(a.pop())</span><br><span class="line">a.clear() #将集合清空 </span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h4 id="其他运算"><a href="#其他运算" class="headerlink" title="其他运算"></a>其他运算</h4><p>像数学中概念一样，Python 对集合也提供了并集、交集、差集等运算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;1,3,&#x27;sxt&#x27;&#125; </span><br><span class="line">b = &#123;&#x27;he&#x27;,&#x27;it&#x27;,&#x27;sxt&#x27;&#125; </span><br><span class="line">print(&#x27;并集：&#x27;,a|b) #并集 </span><br><span class="line">print(&#x27;并集：&#x27;,a.union(b))#并集 </span><br><span class="line">print(&#x27;交集：&#x27;,a&amp;b) #交集 </span><br><span class="line">print(&#x27;交集：&#x27;,a.intersection(b)) #交集 </span><br><span class="line">print(&#x27;差集：&#x27;,a-b) #差集 </span><br><span class="line">print(&#x27;差集：&#x27;,a.difference(b)) #差集</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;集合（set）&quot;&gt;&lt;a href=&quot;#集合（set）&quot; class=&quot;headerlink&quot; title=&quot;集合（set）&quot;&gt;&lt;/a&gt;集合（set）&lt;/h3&gt;&lt;p&gt;Python中的集合跟数学上的集合是一致的，不允许有重复元素，而且可以进行交集、并集、差集等运算。&lt;</summary>
      
    
    
    
    
    <category term="python基础" scheme="https://xiaowog.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python基础第7课-字典</title>
    <link href="https://xiaowog.top/2022/02/17/python%E5%9F%BA%E7%A1%80%E7%AC%AC7%E8%AF%BE-%E5%AD%97%E5%85%B8/"/>
    <id>https://xiaowog.top/2022/02/17/python%E5%9F%BA%E7%A1%80%E7%AC%AC7%E8%AF%BE-%E5%AD%97%E5%85%B8/</id>
    <published>2022-02-17T11:48:37.000Z</published>
    <updated>2022-02-17T13:16:22.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>Python 内置了字典(dict)的支持，使用键-值（key-value）存储，具有极快的查找速度。字典是另一种可变容器模型，且可存储任意类型对象。字典的每个键值对(key=&gt;value)用冒号(:)分割，每对之间用逗号(,)分割，整个字典包括在花括号({})中 ，语法格式如下： </p><p><code>d = &#123;key1 : value1, key2 : value2 &#125;</code></p><p>字典中通过“键对象”找到对应的“值对象”。“键”是任意的不可变数据，比如：整数、浮点数、字符串、元组。但是：列表、字典、集合这些可变对象，不能作为“键”。并且“键”不可重复。“值”可以是任意的数据，并且可重复。</p><h4 id="字典的创建"><a href="#字典的创建" class="headerlink" title="字典的创建"></a>字典的创建</h4><h5 id="通过-，dict-创建"><a href="#通过-，dict-创建" class="headerlink" title="通过{}，dict()创建"></a>通过{}，dict()创建</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#x27;name&#x27;:&#x27;xiaoxue&#x27;,&#x27;age&#x27;:18,&#x27;job&#x27;:&#x27;programmer&#x27;&#125; </span><br><span class="line">b = dict(name=&#x27;xiaoxue&#x27;,age=18,job=&#x27;programmer&#x27;) </span><br><span class="line">c = dict([(&quot;name&quot;,&quot;xiaoxue&quot;),(&quot;age&quot;,18),(&quot;job&quot;,&#x27;programmer&#x27;)]) </span><br><span class="line">d = &#123;&#125; #空的字典对象 </span><br><span class="line">e = dict() #空的字典对象 </span><br><span class="line">print(&#x27;字典 a：&#x27;,a) </span><br><span class="line">print(&#x27;字典 b：&#x27;,b)</span><br><span class="line">print(&#x27;字典 c：&#x27;,c)</span><br><span class="line">print(&#x27;字典 d：&#x27;,d) </span><br><span class="line">print(&#x27;字典 e：&#x27;,e)</span><br></pre></td></tr></table></figure><h5 id="通过zip-创建"><a href="#通过zip-创建" class="headerlink" title="通过zip()创建"></a>通过zip()创建</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">k = [&#x27;name&#x27;,&#x27;age&#x27;,&#x27;job&#x27;]</span><br><span class="line">v = [&#x27;xiaoxue&#x27;,18,&#x27;teacher&#x27;]</span><br><span class="line">a = dict(zip(k,v))</span><br><span class="line">print(&#x27;字典 a：&#x27;,a)</span><br></pre></td></tr></table></figure><h5 id="通过-fromkeys-创建值为空的字典"><a href="#通过-fromkeys-创建值为空的字典" class="headerlink" title="通过 fromkeys 创建值为空的字典"></a>通过 fromkeys 创建值为空的字典</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = dict.formkeys([&#x27;name&#x27;,&#x27;age&#x27;,&#x27;job&#x27;])</span><br><span class="line">print(&#x27;值为空的字典 a:&#x27;,a)</span><br></pre></td></tr></table></figure><h5 id="推导式语法创建"><a href="#推导式语法创建" class="headerlink" title="推导式语法创建"></a>推导式语法创建</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">items3 = &#123;num: num ** 2 for num in range(1, 10)&#125;</span><br><span class="line">print(items3)</span><br></pre></td></tr></table></figure><h4 id="字典的访问"><a href="#字典的访问" class="headerlink" title="字典的访问"></a>字典的访问</h4><h5 id="通过-键-访问"><a href="#通过-键-访问" class="headerlink" title="通过 [键] 访问"></a>通过 [键] 访问</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#x27;name&#x27;:&#x27;xiaoxue&#x27;,&#x27;age&#x27;:18,&#x27;job&#x27;:&#x27;programmer&#x27;&#125; </span><br><span class="line">print(&#x27;name:&#x27;,a[&#x27;name&#x27;]) </span><br><span class="line">print(&#x27;age:&#x27;,a[&#x27;age&#x27;]) </span><br><span class="line">print(&#x27;job:&#x27;,a[&#x27;job&#x27;])</span><br></pre></td></tr></table></figure><p>注意：若键不存在，则抛出异常 </p><h5 id="通过get-方法访问"><a href="#通过get-方法访问" class="headerlink" title="通过get 方法访问"></a>通过get 方法访问</h5><p>优点是：指定键不存在，返回 None；<strong>也可以设定指定键不存在时默认返回的对象</strong>。推荐使用 get()获取“值对象”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#x27;name&#x27;:&#x27;xiaoxue&#x27;,&#x27;age&#x27;:18,&#x27;job&#x27;:&#x27;programmer&#x27;&#125; </span><br><span class="line">print(&#x27;name:&#x27;,a.get(&#x27;name&#x27;)) </span><br><span class="line">print(&#x27;age:&#x27;,a.get(&#x27;age&#x27;)) </span><br><span class="line">print(&#x27;job:&#x27;,a.get(&#x27;job&#x27;)) </span><br><span class="line">print(&#x27;family&#x27;,a.get(&#x27;family&#x27;))</span><br><span class="line">print(&#x27;sex:&#x27;,a.get(&#x27;sex&#x27;，&#x27;man&#x27;))</span><br></pre></td></tr></table></figure><h5 id="对字典中所有键值对进行遍历"><a href="#对字典中所有键值对进行遍历" class="headerlink" title="对字典中所有键值对进行遍历"></a>对字典中所有键值对进行遍历</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#x27;name&#x27;:&#x27;xiaoxue&#x27;,&#x27;age&#x27;:18,&#x27;job&#x27;:&#x27;programmer&#x27;&#125; </span><br><span class="line">for i in a:</span><br><span class="line">print(f&#x27;&#123;key&#125;:&#123;a[key]&#125;&#x27;)</span><br></pre></td></tr></table></figure><h4 id="字典的常见操作"><a href="#字典的常见操作" class="headerlink" title="字典的常见操作"></a>字典的常见操作</h4><p>字典类似于列表，也可以进行增删改查等操作。就像其他内建类型一样，字典也有方法，这些方法非常有用。</p><h5 id="通过键修改创建"><a href="#通过键修改创建" class="headerlink" title="通过键修改创建"></a>通过键修改创建</h5><p> 给字典新增“键值对”。如果“键”已经存在，则覆盖旧的键值对；如果“键”不存在，则新增“键值对”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#x27;name&#x27;:&#x27;xiaoxue&#x27;,&#x27;age&#x27;:18,&#x27;job&#x27;:&#x27;programmer&#x27;&#125; </span><br><span class="line">a[&#x27;address&#x27;]=&#x27;北京&#x27; #address 的键不存在，则新增 </span><br><span class="line">a[&#x27;age&#x27;]=28 #age 的键存在，则进行修改 </span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h5 id="通过update方法进行修改"><a href="#通过update方法进行修改" class="headerlink" title="通过update方法进行修改"></a>通过update方法进行修改</h5><p> update 方法可以用一个字典中的元素更新另外一个字典。该方法接收一个参数。该参数表示用作更新数据的字典数据源。如果 key 有重复，则直接覆盖。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#x27;name&#x27;:&#x27;xiaoxue&#x27;,&#x27;age&#x27;:18,&#x27;job&#x27;:&#x27;programmer&#x27;&#125; </span><br><span class="line">b = &#123;&#x27;name&#x27;:&#x27;xuefengliu&#x27;,&#x27;money&#x27;:1000,&#x27;sex&#x27;:&#x27;男的&#x27;&#125; </span><br><span class="line">a.update(b) </span><br><span class="line">print(a) </span><br><span class="line"># 输出为&#123;&#x27;name&#x27;:&#x27;xuefengliu&#x27;,&#x27;age&#x27;:18,&#x27;job&#x27;:&#x27;programmer&#x27;，&#x27;money&#x27;:1000,&#x27;sex&#x27;:&#x27;男的&#x27;&#125; </span><br></pre></td></tr></table></figure><h5 id="字典元素的删除"><a href="#字典元素的删除" class="headerlink" title="字典元素的删除"></a>字典元素的删除</h5><p>字典中元素的删除，可以使用 del()方法；或者 clear()删除所有键值对；pop()删除指定键值对，并返回对应的“值对象”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#x27;name&#x27;:&#x27;xiaoxue&#x27;,&#x27;age&#x27;:18,&#x27;job&#x27;:&#x27;programmer&#x27;&#125; </span><br><span class="line">del(a[&#x27;name&#x27;]) #del 删除元素 </span><br><span class="line">print(a) </span><br><span class="line">b=a.pop(&#x27;age&#x27;) #pop 删除元素，返回对应的值 </span><br><span class="line">print(b) </span><br><span class="line">print(a) </span><br><span class="line">a.clear() #清空字典元素 </span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>popitem()方法用于随机删除和返回该键值对。字典是“无序可变序列”，因此没有第一个元素、最后一个元素的概念；popitem 弹出随机的项，因为字典并没有”最后的元素”或者其他有关顺序的概念。若想一个接一个地移除并处理项，这个方法就非常有效（因为不用首先获取键的列表）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#x27;name&#x27;:&#x27;xiaoxue&#x27;,&#x27;age&#x27;:18,&#x27;job&#x27;:&#x27;programmer&#x27;&#125; </span><br><span class="line">while len(a):</span><br><span class="line">    b = a.popitem()</span><br><span class="line">    print(b)</span><br><span class="line"></span><br><span class="line"># print(a.popitem()) </span><br><span class="line"># print(a.popitem()) </span><br><span class="line"># print(a.popitem())</span><br></pre></td></tr></table></figure><h5 id="items-方法、keys-方法和-values-方法"><a href="#items-方法、keys-方法和-values-方法" class="headerlink" title="items 方法、keys 方法和 values 方法"></a>items 方法、keys 方法和 values 方法</h5><p>items 方法用于返回字典中所有的 key-value 对。获得的每一个 key-value 对用一个元组表示。items 方法返回的值是一个被称为字典视图的特殊类型，可以被用于迭代（如使用在for 循环中）。items 方法的返回值与字典使用了同样的值，也就是说，修改了字典或 items方法的返回值，修改的结果就会反应在另一方法上。keys 方法用于返回字典中所有的 key，返回值类型与 items 方法类似，可以用于迭代。values 方法用于以迭代器形式返回字典中值的列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#x27;name&#x27;:&#x27;xiaoxue&#x27;,&#x27;age&#x27;:18,&#x27;job&#x27;:&#x27;programmer&#x27;&#125; </span><br><span class="line">print(a.items()) #字典中所有的 key-value 对 </span><br><span class="line">print(a.keys()) #字典中所有的 keys </span><br><span class="line">print(a.values()) #字典中所有的 value </span><br><span class="line">#通过遍历 key，根据 key 获取值 </span><br><span class="line">for key in a.keys(): </span><br><span class="line">    print(key,&#x27;:&#x27;,a.get(key))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;字典&quot;&gt;&lt;a href=&quot;#字典&quot; class=&quot;headerlink&quot; title=&quot;字典&quot;&gt;&lt;/a&gt;字典&lt;/h3&gt;&lt;p&gt;Python 内置了字典(dict)的支持，使用键-值（key-value）存储，具有极快的查找速度。字典是另一种可变容器模型，且可存储任意</summary>
      
    
    
    
    
    <category term="python基础" scheme="https://xiaowog.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python基础第6课-顽固的元组</title>
    <link href="https://xiaowog.top/2022/02/14/python%E5%9F%BA%E7%A1%80%E7%AC%AC6%E8%AF%BE-%E9%A1%BD%E5%9B%BA%E7%9A%84%E5%85%83%E7%BB%84/"/>
    <id>https://xiaowog.top/2022/02/14/python%E5%9F%BA%E7%A1%80%E7%AC%AC6%E8%AF%BE-%E9%A1%BD%E5%9B%BA%E7%9A%84%E5%85%83%E7%BB%84/</id>
    <published>2022-02-14T13:24:53.000Z</published>
    <updated>2022-02-14T14:20:20.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="顽固的元组"><a href="#顽固的元组" class="headerlink" title="顽固的元组"></a>顽固的元组</h3><p>元组和列表一样，也是一种序列。但元组的元素不能修改。</p><h4 id="元组的创建"><a href="#元组的创建" class="headerlink" title="元组的创建"></a>元组的创建</h4><h5 id="最基本的创建"><a href="#最基本的创建" class="headerlink" title="最基本的创建"></a>最基本的创建</h5><p>通过()创建元组，小括号可以省略。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=1,2,3,4,5,6,7 #创建一个元组 省略了括号 </span><br><span class="line">b=(1,2,3,4,5,6,7) #创建一个元组 </span><br><span class="line">c=(42,) #创建一个只有一个元素值的元组 </span><br><span class="line">d=() #创建一个空的元组 </span><br><span class="line">print(a) </span><br><span class="line">print(b) </span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><h5 id="通过-tuple-创建元组"><a href="#通过-tuple-创建元组" class="headerlink" title="通过 tuple()创建元组"></a>通过 tuple()创建元组</h5><p>tuple 函数的功能与 list 函数基本上是一样的。以一个序列作为参数并把它转换为元祖。如果元素的参数就是元祖，那么该参数就会被原样返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#使用 tuple()函数创建元组 </span><br><span class="line">a=tuple(&quot;abc&quot;) </span><br><span class="line">b=tuple(range(3)) </span><br><span class="line">c=tuple((1,2,3,4,5)) </span><br><span class="line">print(a) </span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><h5 id="元组的基本操作"><a href="#元组的基本操作" class="headerlink" title="元组的基本操作"></a>元组的基本操作</h5><p>元组的元素不能修改，但可以转换成列表进行修改元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = (20,10,30,9,8) </span><br><span class="line">a[3]=33 #修改元组中的元素，报错</span><br><span class="line">a = list(a)</span><br><span class="line">a[3]=33 #修改成功</span><br><span class="line">print(a) #输出为[20,10,33,9,8]</span><br></pre></td></tr></table></figure><h5 id="zip创建"><a href="#zip创建" class="headerlink" title="zip创建"></a>zip创建</h5><p>zip(列表 1，列表 2，…)将多个列表对应位置的元素组合成为元组，并返回这个 zip 对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [10,20,30] </span><br><span class="line">b = [40,50,60] </span><br><span class="line">c = [70,80,90] </span><br><span class="line">d = zip(a,b,c) </span><br><span class="line">print(tuple(d))</span><br></pre></td></tr></table></figure><h5 id="生成器推导式创建元组"><a href="#生成器推导式创建元组" class="headerlink" title="生成器推导式创建元组"></a>生成器推导式创建元组</h5><p>从形式上看，生成器推导式与列表推导式类似，只是生成器推导式使用小括号。列表推导式直接生成列表对象，生成器推导式生成的不是列表也不是元组，而是一个生成器对象。通过生成器对象，转化成列表或者元组。</p><p>也可以使用生成器对象的<code>__next__()</code>方法进行遍历，或者直接作为迭代器对象来使用。不管什么方式使用，元素访问结束后，如果需要重新访问其中的元素，必须重新创建该生成器对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 请注意下面的代码创建的不是一个元组而是一个生成器对象</span><br><span class="line"># 通过生成器可以获取到数据但它不占用额外的空间存储数据</span><br><span class="line"># 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间)</span><br><span class="line">import sys</span><br><span class="line">f = (x ** 2 for x in range(1, 1000))</span><br><span class="line">print(sys.getsizeof(f))  # 相比生成式生成器不占用存储数据的空间</span><br><span class="line">print(f) #生成器对象 </span><br><span class="line">for val in f:</span><br><span class="line">    print(val) # 访问完成需要再次创建</span><br><span class="line">print(list(f)) #空列表</span><br><span class="line"></span><br><span class="line">s = (x*2 for x in range(5)) </span><br><span class="line">print(tuple(s)) #tuple 函数转换为元组</span><br><span class="line"></span><br><span class="line">s = (x*2 for x in range(5))</span><br><span class="line">print(&#x27;next 方法获取元素：&#x27;,s.__next__()) </span><br><span class="line">print(&#x27;next 方法获取元素：&#x27;,s.__next__()) </span><br><span class="line">print(&#x27;next 方法获取元素：&#x27;,s.__next__())</span><br></pre></td></tr></table></figure><p>除了上面提到的生成器语法，Python中还有另外一种定义生成器的方式，就是通过<code>yield</code>关键字将一个普通函数改造成生成器函数。下面的代码演示了如何实现一个生成<a class="link" href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97">斐波拉切数列<i class="fas fa-external-link-alt"></i></a>的生成器。所谓斐波拉切数列可以通过下面<a class="link" href="https://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92">递归<i class="fas fa-external-link-alt"></i></a>的方法来进行定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def fib(n):</span><br><span class="line">    a, b = 0, 1</span><br><span class="line">    for _ in range(n):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        yield a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    for val in fib(20):</span><br><span class="line">        print(val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="元组的访问"><a href="#元组的访问" class="headerlink" title="元组的访问"></a>元组的访问</h4><p>元组的元素访问和列表一样，只不过返回的仍然是元组对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = (20,10,30,9,8) </span><br><span class="line">print(a[1]) </span><br><span class="line">print(a[1:3]) </span><br><span class="line">print(a[:4])</span><br><span class="line">for i in a:</span><br><span class="line">print(i) #元组遍历</span><br></pre></td></tr></table></figure><p>列表关于排序的方法 list.sort()是修改原列表对象，元组没有该方法。如果要对元组排序，只能使用内置函数 sorted(tupleObj)，并生成新的列表对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = (20,10,30,9,8) </span><br><span class="line">print(sorted(a))</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>元组在创建时间和占用的空间上面都优于列表。</p><p>如果不需要对元素进行添加、删除、修改的时候，可以考虑使用元组，当然如果一个方法要返回多个值，使用元组也是不错的选择。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;顽固的元组&quot;&gt;&lt;a href=&quot;#顽固的元组&quot; class=&quot;headerlink&quot; title=&quot;顽固的元组&quot;&gt;&lt;/a&gt;顽固的元组&lt;/h3&gt;&lt;p&gt;元组和列表一样，也是一种序列。但元组的元素不能修改。&lt;/p&gt;
&lt;h4 id=&quot;元组的创建&quot;&gt;&lt;a href=&quot;#元组</summary>
      
    
    
    
    
    <category term="python基础" scheme="https://xiaowog.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python基础第5课-列表</title>
    <link href="https://xiaowog.top/2022/02/11/python%E5%9F%BA%E7%A1%80%E7%AC%AC5%E8%AF%BE-%E5%88%97%E8%A1%A8/"/>
    <id>https://xiaowog.top/2022/02/11/python%E5%9F%BA%E7%A1%80%E7%AC%AC5%E8%AF%BE-%E5%88%97%E8%A1%A8/</id>
    <published>2022-02-11T07:24:46.000Z</published>
    <updated>2022-02-11T08:41:58.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表用于存储任意数目、任意类型的数据集合。在 Python 中，用方括号 [] 来表示列表，并用逗号来分隔其中的元素。语法格式如下：</p><p><code>list=[元素 1,元素 2,…]</code> </p><h4 id="列表创建"><a href="#列表创建" class="headerlink" title="列表创建"></a>列表创建</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a1 = []  # 创建一个空列表</span><br><span class="line">a2 = list() #创建一个空列表</span><br><span class="line">b = [1,2,3,4]  # 创建一个整数类型的列表</span><br><span class="line">c = [10,20,&#x27;abc&#x27;,True,3.14]  # 创建不同类型的列表</span><br><span class="line"># 乘号表示列表元素的重复</span><br><span class="line">e = [&#x27;hello&#x27;] * 3</span><br><span class="line">print(e)  # 输出结果为[&#x27;hello&#x27;,&#x27;hello&#x27;,&#x27;hello&#x27;]</span><br></pre></td></tr></table></figure><h5 id="list-创建列表"><a href="#list-创建列表" class="headerlink" title="list()创建列表"></a>list()创建列表</h5><p>list()可以将任何可迭代对象转化成列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = list(&quot;gaoqi,sxt&quot;) </span><br><span class="line">print(d)  # 输出结果为[&#x27;g&#x27;,&#x27;a&#x27;,&#x27;o&#x27;,&#x27;q&#x27;,&#x27;i&#x27;,&#x27;,&#x27;,&#x27;s&#x27;,&#x27;x&#x27;,&#x27;t&#x27;]</span><br></pre></td></tr></table></figure><h5 id="range-创建整数列表"><a href="#range-创建整数列表" class="headerlink" title="range()创建整数列表"></a>range()创建整数列表</h5><p>注意range()函数和2.x版本中产生的对象类型不同，3.x版本创建的是可迭代对象，而不是列表，使用我们可以使用list()函数进行类型转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = list(range(10))</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h5 id="推导式生成列表-列表生成式"><a href="#推导式生成列表-列表生成式" class="headerlink" title="推导式生成列表 (列表生成式)"></a>推导式生成列表 (列表生成式)</h5><p>使用列表推导式可以非常方便的创建列表，语法如下:</p><p><code>[表达式  for item in 可迭代对象 ]</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=[x for x in range(1,5)]</span><br><span class="line">b=[x*2 for x in range(1,5)]</span><br><span class="line">c=[x*2 for x in range(1,20) if x%5==0 ] #增加条件筛选，5的倍数</span><br><span class="line">d=[x for x in &quot;abcdefg&quot;]</span><br><span class="line"></span><br><span class="line">print(&quot;a 列表的元素:&quot;,a)</span><br><span class="line">print(&quot;b 列表的元素:&quot;,b)</span><br><span class="line">print(&quot;c 列表的元素:&quot;,c)</span><br><span class="line">print(&quot;d 列表的元素:&quot;,d)</span><br></pre></td></tr></table></figure><h4 id="列表的基本操作"><a href="#列表的基本操作" class="headerlink" title="列表的基本操作"></a>列表的基本操作</h4><p>列表中有一些自己的操作例如列表增加、列表修改、列表删除。当列表增加和删除元素时，列表会自动进行内存管理，大大减少了程序员的负担。但这个特点涉及列表元素的大量移动，效率较低。除非必要，一般只在列表的尾部添加元素或删除元素，这会大大提高列表的操作效率。</p><h5 id="列表的查找"><a href="#列表的查找" class="headerlink" title="列表的查找"></a>列表的查找</h5><h6 id="通过索引直接访问元素"><a href="#通过索引直接访问元素" class="headerlink" title="通过索引直接访问元素"></a>通过索引直接访问元素</h6><p>序列中的所有元素都是有索引的，编号从 0 开始递增，最大到列表的长度减 1。序列中的所有元素都可以通过索引访问。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [10,20,30,40,50,60,70,80,90] </span><br><span class="line">print(&quot;列表中的第一个元素:&quot;,a[0]) </span><br><span class="line">print(&quot;列表中的第三个元素：&quot;,a[2])</span><br></pre></td></tr></table></figure><p>如果索引是负数，那么 Python 语言会从列表右侧第一个元素开始获取。序列最后一个元素的索引是-1，倒数第二个元素的索引是-2，以此类推。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [10,20,30,40,50,60,70,80,90]</span><br><span class="line">print(&quot;列表中倒数第一个元素:&quot;,a[-1])</span><br><span class="line">print(&quot;列表中倒数三个元素：&quot;,a[-3])</span><br></pre></td></tr></table></figure><p>当索引超过列表的索引范围，会抛出异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [10,20,30,40,50,60,70,80,90] </span><br><span class="line">#列表中有 9 个元素从左侧获取的索引范围：[0 到 8] </span><br><span class="line">#列表中有 9 个元素从右侧获取的索引范围：[-1 到-9] </span><br><span class="line">print(a[-9]) </span><br><span class="line">print(a[0]) </span><br><span class="line">print(a[9]) #超出范围</span><br></pre></td></tr></table></figure><h6 id="index-查找"><a href="#index-查找" class="headerlink" title="index()查找"></a>index()查找</h6><p>index()可以获取指定元素首次出现的索引位置。语法是：</p><p><code>index(value,[start,[end]])</code></p><p>其中，start 和 end 指定了搜索的范围</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [10,20,30,40,50,20,30,20,30] </span><br><span class="line">print(a.index(20)) #从列表中搜索第一个 20 </span><br><span class="line">print(a.index(20,3)) #从索引位置 3 开始往后搜索的第一个 20</span><br><span class="line">print(a.index(30,5,7)) #从索引位置 5 到 7 (不包含)这个区间，第一次出现 30 元素的位置</span><br></pre></td></tr></table></figure><h6 id="列表的切片"><a href="#列表的切片" class="headerlink" title="列表的切片"></a>列表的切片</h6><p>和字符串一样，列表也可以做切片操作，通过切片操作我们可以实现对列表的复制或者将列表中的一部分取出来创建出新的列表，代码如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fruits =[&#x27;grape&#x27;, &#x27;apple&#x27;, &#x27;strawberry&#x27;, &#x27;waxberry&#x27;, ‘pitaya&#x27;, &#x27;pear&#x27;, &#x27;mango&#x27;]</span><br><span class="line"></span><br><span class="line"># 列表切片</span><br><span class="line">fruits2 = fruits[1:4]</span><br><span class="line">print(fruits2) # apple strawberry waxberry</span><br><span class="line"></span><br><span class="line"># 可以通过完整切片操作来复制列表</span><br><span class="line">fruits3 = fruits[:]</span><br><span class="line">print(fruits3)</span><br><span class="line"></span><br><span class="line">fruits4 = fruits[-3:-1]</span><br><span class="line">print(fruits4) # [&#x27;pitaya&#x27;, &#x27;pear&#x27;]</span><br><span class="line"></span><br><span class="line"># 可以通过反向切片操作来获得倒转后的列表的拷贝</span><br><span class="line">fruits5 = fruits[::-1]</span><br><span class="line">print(fruits5) # [&#x27;mango&#x27;, &#x27;pear&#x27;, &#x27;pitaya&#x27;, &#x27;waxberry&#x27;, &#x27;strawberry&#x27;, &#x27;apple&#x27;, &#x27;grape&#x27;]</span><br></pre></td></tr></table></figure><h6 id="for循环遍历列表"><a href="#for循环遍历列表" class="headerlink" title="for循环遍历列表"></a>for循环遍历列表</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 通过循环用下标遍历列表元素</span><br><span class="line">for index in range(len(list1)):</span><br><span class="line">    print(list1[index])</span><br><span class="line"># 通过for循环遍历列表元素</span><br><span class="line">for elem in list1:</span><br><span class="line">    print(elem)</span><br><span class="line"># 通过enumerate函数处理列表之后再遍历可以同时获得元素索引和值</span><br><span class="line">for index, elem in enumerate(list1):</span><br><span class="line">    print(index, elem)</span><br></pre></td></tr></table></figure><h5 id="列表的修改"><a href="#列表的修改" class="headerlink" title="列表的修改"></a>列表的修改</h5><p>修改列表中的某一个元素，可以像使用数组一样对列表中的特定元素赋值，也就是使用一对中括号指定元素在列表中的索引，然后使用赋值运算符（=）进行赋值。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s=[&#x27;admin&#x27;,&#x27;lili&#x27;,&#x27;john&#x27;] </span><br><span class="line">s[0]=&#x27;管理员&#x27; </span><br><span class="line">print(&#x27;修改后列表的元素：&#x27;,s)</span><br></pre></td></tr></table></figure><h5 id="列表的添加"><a href="#列表的添加" class="headerlink" title="列表的添加"></a>列表的添加</h5><h6 id="append"><a href="#append" class="headerlink" title="append()"></a>append()</h6><p>在列表的末尾追加一个新对象，使用 append()方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#列表中添加元素 </span><br><span class="line">a=[10,20,30] </span><br><span class="line">a.append(40) </span><br><span class="line">print(&#x27;增加元素后的列表：&#x27;,a)</span><br></pre></td></tr></table></figure><h6 id="列表加法"><a href="#列表加法" class="headerlink" title="列表加法"></a>列表加法</h6><p><code>+</code>运算符操作，并不是真正的尾部添加元素，而是创建新的列表对象；将原列表的元素和新列表的元素依次复制到新的列表对象中。这样，会涉及大量的复制操作，对于操作大量元素不建议使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#列表使用+操作符相加 </span><br><span class="line">a=[10,20,30] </span><br><span class="line">print(&#x27;a 的地址：&#x27;,id(a)) </span><br><span class="line">b=[40,50] </span><br><span class="line">a=a+b </span><br><span class="line">print(&#x27;a 列表的元素：&#x27;,a) </span><br><span class="line">print(&#x27;a 的地址：&#x27;,id(a))</span><br><span class="line">#此处，变量 a 的地址发生了变化。也就是创建了新的列表对象。</span><br></pre></td></tr></table></figure><h6 id="extend"><a href="#extend" class="headerlink" title="extend()"></a>extend()</h6><p>extend()方法，将目标列表的所有元素添加到本列表的尾部，属于原地操作，不创建新的列表对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#使用 extend()方法添加列表 </span><br><span class="line">a=[10,20,30] </span><br><span class="line">print(&#x27;a 的地址：&#x27;,id(a)) </span><br><span class="line">b=[40,50] </span><br><span class="line">a.extend(b) </span><br><span class="line">print(&#x27;a 列表的元素：&#x27;,a)  # [10,20,30,40,50]</span><br><span class="line">print(&#x27;a 的地址：&#x27;,id(a))</span><br></pre></td></tr></table></figure><h6 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h6><p>使用 insert()方法可以将指定的元素插入到列表对象的任意制定位置。这样会让插入位置后面所有的元素进行移动，会影响处理速度。涉及大量元素时，尽量避免使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#使用 insert 函数插入元素 </span><br><span class="line">a=[10,20,30] </span><br><span class="line">a.insert(2,100) #在列表 a 的索引 2 处插入元素 100 </span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>类似发生这种移动的函数还有：remove()、pop()、del()，它们在删除非尾部元素时也会发生操作位置后面元素的移动。</p><h5 id="列表的删除"><a href="#列表的删除" class="headerlink" title="列表的删除"></a>列表的删除</h5><h6 id="del"><a href="#del" class="headerlink" title="del()"></a>del()</h6><p>del 删除列表指定位置的元素。语法格式：del 元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [1234,111,123]</span><br><span class="line">del a[0]</span><br></pre></td></tr></table></figure><h6 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h6><p>从指定的位置删除元素并返回该元素,如果未指定位置则默认操作列表最后一个元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [1234,111,123]</span><br><span class="line">c = a.pop(0)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><h6 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h6><p>删除首次出现的指定元素，若不存在该元素抛出异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [1234,111,123]</span><br><span class="line">if 1234 in a:</span><br><span class="line">    a.remove(1234)</span><br></pre></td></tr></table></figure><h6 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h6><p>clear()用于清空列表内容 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=[11,20,13,&#x27;a&#x27;,True,&#x27;hello&#x27;] </span><br><span class="line">a.clear() </span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h5 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h5><h6 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h6><p>len方法返回的是列表的长度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=[10,20,30,40,50,60] </span><br><span class="line">print(len(a)) #运行结果是 6 </span><br></pre></td></tr></table></figure><h6 id="max-min"><a href="#max-min" class="headerlink" title="max()   min()"></a>max()   min()</h6><p>max方法返回的是列表元素中的最大值，min方法返回的是列表元素中的最小值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=[10,20,30,40,50,60] </span><br><span class="line">print(max(a)) #运行结果是 60 </span><br><span class="line">print(min(a)) #运行结果是 10 </span><br><span class="line">b=[&#x27;a&#x27;,30,&#x27;b&#x27;,40] </span><br><span class="line">print(max(b)) #字符串和数字不能比较，将抛出异常</span><br></pre></td></tr></table></figure><h6 id="copy"><a href="#copy" class="headerlink" title="copy()"></a>copy()</h6><p>copy()进行复制列表 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aa=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;] </span><br><span class="line">bb=aa.copy() </span><br><span class="line">print(aa) </span><br><span class="line">print(bb)</span><br></pre></td></tr></table></figure><h6 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h6><p>count()统计元素出现的次数 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=[10,20,40,30,10,20,50,10] </span><br><span class="line">print(&#x27;元素 10 出现的次数：&#x27;,a.count(10)) </span><br><span class="line">print(&#x27;元素 20 出现的次数：&#x27;,a.count(20)) </span><br><span class="line">print(&#x27;元素 30 出现的次数：&#x27;,a.count(30))</span><br></pre></td></tr></table></figure><h6 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h6><p>reverse()用于将列表中的元素反向存放 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=[1,2,3,4,5,6,7] </span><br><span class="line">a.reverse() </span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h6 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#sort()用于对列表进行排序，调用该方法会改变原来的列表 </span><br><span class="line">a=[11,20,13,34,5,36,17] </span><br><span class="line">a.sort() </span><br><span class="line">print(a) </span><br><span class="line">print(&#x27;正序：&#x27;,a) </span><br><span class="line">a.sort(reverse=True) </span><br><span class="line">print(&#x27;逆序：&#x27;,a) </span><br><span class="line"></span><br><span class="line">#sorted 用于对列表进行排序，生成新列表，不改变原来的列表 </span><br><span class="line">print(&#x27;-&#x27;*5,&#x27;sorted 排序&#x27;,&#x27;-&#x27;*5) </span><br><span class="line">a=[11,20,13,34,5,36,17] </span><br><span class="line">b=sorted(a) </span><br><span class="line">print(&#x27;a 列表：&#x27;,a) #原来列表不会被修改 </span><br><span class="line">print(&#x27;正序 b 列表：&#x27;,b)</span><br><span class="line">b=sorted(a, reverse=True) </span><br><span class="line">print(&#x27;逆序 b 列表：&#x27;,b)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h3&gt;&lt;p&gt;列表用于存储任意数目、任意类型的数据集合。在 Python 中，用方括号 [] 来表示列表，并用逗号来分隔其中的元素。语法格式如下：&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="python基础" scheme="https://xiaowog.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python踩坑合集（1）</title>
    <link href="https://xiaowog.top/2022/02/08/python%E8%B8%A9%E5%9D%91%E5%90%88%E9%9B%86%EF%BC%881%EF%BC%89/"/>
    <id>https://xiaowog.top/2022/02/08/python%E8%B8%A9%E5%9D%91%E5%90%88%E9%9B%86%EF%BC%881%EF%BC%89/</id>
    <published>2022-02-08T09:11:10.000Z</published>
    <updated>2022-02-14T03:25:26.300Z</updated>
    
    <content type="html"><![CDATA[<h3 id="for循环问题"><a href="#for循环问题" class="headerlink" title="for循环问题"></a>for循环问题</h3><p>每次进入循环前，都会判断当前循环次数与现在的可迭代对象的长度，如果小于，则进入循环，否则，循环结束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ss = [2,3,6,9,7,1]</span><br><span class="line">for i in ss:</span><br><span class="line">print(max(ss),end=&#x27;,&#x27;)</span><br><span class="line">ss.remove(max(ss))</span><br><span class="line"># 输出结果为9，7，6，</span><br></pre></td></tr></table></figure><p>这里，他只进行了三次循环，因为他第三次循环结束时可迭代对象为[2,3,1],长度为3等于循环次数，循环结束。更直观的例子如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = [1,2,3,4]</span><br><span class="line">for i in s:</span><br><span class="line">print(s.pop(),end=&#x27;,&#x27;)  # pop()删除位于列表结尾的元素，并返回</span><br><span class="line"># 输出结果为4,3,</span><br></pre></td></tr></table></figure><h3 id="字典问题"><a href="#字典问题" class="headerlink" title="字典问题"></a>字典问题</h3><p>字典.items()返回的数据类型为特殊类型dict_items类型，可使用for循环遍历读取，读取出的形式为元组(‘键’,’值’)，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p = &#123;&#x27;name&#x27;:&#x27;opus&#x27;,&#x27;age&#x27;:19,&#x27;job&#x27;:&#x27;teacher&#x27;&#125;</span><br><span class="line">print(p.items()) </span><br><span class="line"># 输出结果为dict_items([(&#x27;name&#x27;, &#x27;mill&#x27;), (&#x27;age&#x27;, 19), (&#x27;job&#x27;, &#x27;teacher&#x27;)])</span><br><span class="line"></span><br><span class="line">for i in p.items():</span><br><span class="line">print(i,end=&#x27;,&#x27;)  </span><br><span class="line"># 输出结果为(&#x27;name&#x27;, &#x27;mill&#x27;),(&#x27;age&#x27;, 19),(&#x27;job&#x27;, &#x27;teacher&#x27;), </span><br></pre></td></tr></table></figure><p>同样，字典.keys()返回的是dict_keys类型，字典.values()返回的是dict_values类型，此处就不一一举例了。</p><p>字典里的max和min方法比较的是键的大小，而不是值的大小，返回的同样是键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;&#x27;a&#x27;:9,&#x27;b&#x27;:8,&#x27;c&#x27;:7&#125;</span><br><span class="line">print(s.max(),s.min())</span><br><span class="line"># 输出结果为:c a</span><br></pre></td></tr></table></figure><p>字典的get方法：字典.get(‘键’，默认值),如果找不到该键，则返回默认值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;&#x27;a&#x27;:9,&#x27;b&#x27;:8,&#x27;c&#x27;:7&#125;</span><br><span class="line">print(d.get(a,1),d.get(s,2))</span><br><span class="line"># 输出结果为9 2</span><br></pre></td></tr></table></figure><h3 id="从用户输入中得到数字列表"><a href="#从用户输入中得到数字列表" class="headerlink" title="从用户输入中得到数字列表"></a>从用户输入中得到数字列表</h3><p>eval() 返回传入字符串的表达式的结果。就是说：将字符串当成有效的表达式 来求值 并 返回计算结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = 7</span><br><span class="line">eval( &#x27;3 * x&#x27; )</span><br><span class="line"># 输出结果为21</span><br><span class="line">eval(&#x27;pow(2,2)&#x27;)</span><br><span class="line"># 输出结果为4</span><br><span class="line">eval(&#x27;2 + 2&#x27;)</span><br><span class="line"># 输出结果为4</span><br><span class="line">ls = eval(input(&#x27;&#x27;)) # 如果输入3，5，3那么得到的就是一个数字列表</span><br></pre></td></tr></table></figure><p>eval函数就是实现list、dict、tuple与str之间的转化，同样str函数把list，dict，tuple转为为字符串</p><p>同样，spilt()分割字符串也可得到数字列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls = map(int,input(&#x27;&#x27;).split(&#x27;,&#x27;))</span><br><span class="line">#如果输入3，5，3那么得到的就是一个数字列表</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;for循环问题&quot;&gt;&lt;a href=&quot;#for循环问题&quot; class=&quot;headerlink&quot; title=&quot;for循环问题&quot;&gt;&lt;/a&gt;for循环问题&lt;/h3&gt;&lt;p&gt;每次进入循环前，都会判断当前循环次数与现在的可迭代对象的长度，如果小于，则进入循环，否则，循环结束。</summary>
      
    
    
    
    
    <category term="python坑" scheme="https://xiaowog.top/tags/python%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>python基础第4课-字符串</title>
    <link href="https://xiaowog.top/2022/02/07/python%E5%9F%BA%E7%A1%80%E7%AC%AC4%E8%AF%BE-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://xiaowog.top/2022/02/07/python%E5%9F%BA%E7%A1%80%E7%AC%AC4%E8%AF%BE-%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2022-02-07T11:51:33.000Z</published>
    <updated>2022-02-14T03:26:02.723Z</updated>
    
    <content type="html"><![CDATA[<p>字符串是 Python 中最常用的数据类型。我们可以使用引号(‘或”)来创建字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#x27;hello, world!&#x27;</span><br><span class="line">s2 = &quot;hello, world!&quot;</span><br><span class="line"># 以三个双引号或单引号开头的字符串可以折行</span><br><span class="line">s3 = &quot;&quot;&quot;</span><br><span class="line">hello, </span><br><span class="line">world!</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">print(s1, s2, s3, end=&#x27;&#x27;)</span><br></pre></td></tr></table></figure><h4 id="三引号"><a href="#三引号" class="headerlink" title="三引号"></a>三引号</h4><p>Python 中三引号可以将复杂的字符串进行赋值。</p><p>如上一个例子所见，Python 三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。</p><p>三引号让程序员从引号和特殊字符串的泥潭里面解脱出来，自始至终保持一小块字符串的格式是所谓的WYSIWYG（所见即所得）格式的。</p><h4 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h4><p>可以在字符串中使用 <code>\</code>（反斜杠）来表示转义，如下表：</p><table><thead><tr><th align="center">转义字符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>\</code> (在行尾时）</td><td align="center">续行符</td></tr><tr><td align="center"><code>\\</code></td><td align="center">反斜杠符号</td></tr><tr><td align="center"><code>\&#39;</code></td><td align="center">单引号</td></tr><tr><td align="center"><code>\&quot;</code></td><td align="center">双引号</td></tr><tr><td align="center"><code>\a</code></td><td align="center">响铃</td></tr><tr><td align="center"><code>\b</code></td><td align="center">退格</td></tr><tr><td align="center"><code>\e</code></td><td align="center">转义</td></tr><tr><td align="center"><code>\000</code></td><td align="center">空</td></tr><tr><td align="center"><code>\n</code></td><td align="center">换行</td></tr><tr><td align="center"><code>\v</code></td><td align="center">纵向制表符</td></tr><tr><td align="center"><code>\t</code></td><td align="center">横向制表符</td></tr><tr><td align="center"><code>\r</code></td><td align="center">回车，将 \r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \r 后面的内容完全替换完成。</td></tr><tr><td align="center"><code>\f</code></td><td align="center">换页</td></tr><tr><td align="center"><code>\yyy</code></td><td align="center">八进制数，y代表0~7的字符，例如\012</td></tr><tr><td align="center"><code>\xyy</code></td><td align="center">十六进制数，以\x开头，yy代表0~F字符，例如：\x0a代表换行</td></tr><tr><td align="center"><code>\other</code></td><td align="center">其它的字符以普通格式输出</td></tr></tbody></table><p>可以运行下面的代码看看会输出什么。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#x27;\&#x27;hello, world!\&#x27;&#x27;</span><br><span class="line">s2 = &#x27;\n\\hello, world!\\\n&#x27;</span><br><span class="line">print(s1, s2, end=&#x27;&#x27;)</span><br></pre></td></tr></table></figure><p>如果不希望字符串中的<code>\</code>表示转义，我们可以通过在字符串的最前面加上字母<code>r</code>来加以说明，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = r&#x27;\&#x27;hello, world!\&#x27;&#x27;</span><br><span class="line">s2 = r&#x27;\n\\hello, world!\\\n&#x27;</span><br><span class="line">print(s1, s2, end=&#x27;&#x27;)</span><br></pre></td></tr></table></figure><h4 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h4><p>以<code>a =hello</code>，<code>b = world</code> 为例：</p><table><thead><tr><th align="center">操作符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">字符串连接</td><td align="center">a+b==&gt;’helloworld’</td></tr><tr><td align="center">*</td><td align="center">重复输出字符串</td><td align="center">a*2==&gt;’helloworld’</td></tr><tr><td align="center">[]</td><td align="center">通过索引获取字符串中字符</td><td align="center">a[1]==&gt;’e’</td></tr><tr><td align="center">[:]</td><td align="center">截取字符串中的一部分，遵循<strong>左闭右开</strong>原则</td><td align="center">a[1:4]==&gt;’ell’</td></tr><tr><td align="center">in</td><td align="center">成员运算符 - 如果字符串中包含给定的字符返回 True</td><td align="center">“H” in a==&gt;True</td></tr><tr><td align="center">not in</td><td align="center">成员运算符 - 如果字符串中不包含给定的字符返回 True</td><td align="center">“M” not in a==&gt;True</td></tr><tr><td align="center">%</td><td align="center">格式字符串</td><td align="center">不推荐使用</td></tr></tbody></table><p>如下实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#x27;hello &#x27; * 3</span><br><span class="line">print(s1) # hello hello hello </span><br><span class="line">s2 = &#x27;world&#x27;</span><br><span class="line">s1 += s2</span><br><span class="line">print(s1) # hello hello hello world</span><br><span class="line">print(&#x27;ll&#x27; in s1) # True</span><br><span class="line">print(&#x27;good&#x27; in s1) # False</span><br><span class="line">str2 = &#x27;abc123456&#x27;</span><br><span class="line"># 从字符串中取出指定位置的字符(下标运算)</span><br><span class="line">print(str2[2]) # c</span><br><span class="line">print(str2[-7]) # c</span><br><span class="line"># 字符串切片(从指定的开始索引到指定的结束索引)</span><br><span class="line">print(str2[2:5]) # c12</span><br><span class="line">print(str2[2:]) # c123456</span><br><span class="line">print(str2[2::2]) # c246</span><br><span class="line">print(str2[::2]) # ac246</span><br><span class="line">print(str2[::-1]) # 654321cba</span><br><span class="line">print(str2[-3:-1]) # 45</span><br></pre></td></tr></table></figure><h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><p>可以尝试下面代码看看输出什么：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str = &#x27;hello&#x27;</span><br><span class="line">name1 = &#x27;python&#x27;</span><br><span class="line">name2 = &#x27;world&#x27;</span><br><span class="line">print(&#x27;str,&#123;&#125; and &#123;&#125;&#x27;.format(name1,name2))</span><br><span class="line">print(f&#x27;str,&#123;name1&#125; and &#123;name2&#125;&#x27;)</span><br><span class="line">print(&#x27;str,&#123;0&#125;,&#123;1&#125; and &#123;1&#125;&#x27;.format(name1,name2))</span><br><span class="line">age = 10</span><br><span class="line">print(&#x27;age=&#123;:.1f&#125;&#x27;.format(age))</span><br><span class="line">print(f&#x27;&#123;1+2&#125;&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>格式化的顺序：<code>&#123;:&lt;填充&gt;&lt;对齐&gt;&lt;宽度&gt;&lt;,&gt;&lt;.精度&gt;&lt;类型&gt;&#125;</code><br>​                 对齐方式：<code>^</code>居中，<code>&lt;</code>左对齐，<code>&gt;</code>右对齐</p><h4 id="常用字符串的操作"><a href="#常用字符串的操作" class="headerlink" title="常用字符串的操作"></a>常用字符串的操作</h4><table><thead><tr><th align="center">方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">count(str, beg= 0,end=len(string))</td><td align="center">返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td align="center">‘’字符串.isdigit()</td><td align="center">如果字符串只包含数字则返回 True 否则返回 False</td></tr><tr><td align="center">‘字符串’.isalpha()</td><td align="center">如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False</td></tr><tr><td align="center">‘字符串’.isalnum()</td><td align="center">如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True，否则返回 False</td></tr><tr><td align="center">‘分隔符’.join(seq)</td><td align="center">以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td align="center">len(string)</td><td align="center">返回字符串长度</td></tr><tr><td align="center">replace(old, new [, max])</td><td align="center">把 将字符串中的 old 替换成 new,如果 max 指定，则替换不超过 max 次。</td></tr><tr><td align="center">split(str=””, num=string.count(str))</td><td align="center">以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串</td></tr><tr><td align="center">strip([chars])</td><td align="center">删除字符串两端的空格或指定字符。</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;字符串是 Python 中最常用的数据类型。我们可以使用引号(‘或”)来创建字符串。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    
    <category term="python基础" scheme="https://xiaowog.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python基础第3课-分支结构和循环结构</title>
    <link href="https://xiaowog.top/2022/02/06/python%E5%9F%BA%E7%A1%80%E7%AC%AC3%E8%AF%BE-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84%E5%92%8C%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
    <id>https://xiaowog.top/2022/02/06/python%E5%9F%BA%E7%A1%80%E7%AC%AC3%E8%AF%BE-%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84%E5%92%8C%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</id>
    <published>2022-02-06T11:30:54.000Z</published>
    <updated>2022-02-14T03:25:54.786Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="单分支"><a href="#单分支" class="headerlink" title="单分支"></a>单分支</h4><p>if语句单分支结构的语句，形式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if 条件表达式:</span><br><span class="line">语句/语句块</span><br></pre></td></tr></table></figure><p>其中，条件表达式可以是逻辑表达式、关系表达式、算术表达式等等，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = 10</span><br><span class="line">if a&gt;5:  # 如果a大于5则执行下面的语句</span><br><span class="line">print(a)  # 打印变量a</span><br></pre></td></tr></table></figure><h4 id="双分支选择结构"><a href="#双分支选择结构" class="headerlink" title="双分支选择结构"></a>双分支选择结构</h4><p>if-else 双分支结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if 条件表达式:</span><br><span class="line">语句1/语句块1</span><br><span class="line">else:</span><br><span class="line">语句2/语句块2</span><br></pre></td></tr></table></figure><p>当if条件不成立，则执行语句块2，否则执行语句块1</p><h4 id="多分支选择结构"><a href="#多分支选择结构" class="headerlink" title="多分支选择结构"></a>多分支选择结构</h4><p>多分支选择结构的语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if 条件表达式1:</span><br><span class="line">  语句1/语句块1</span><br><span class="line">elif 条件表达式2:</span><br><span class="line">  语句2/语句块2</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">elif 条件表达式n:</span><br><span class="line">  语句n/语句块n</span><br><span class="line">[else:</span><br><span class="line">  语句n+1/语句块n+1</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>注释：</p><ul><li>计算机行业，描述语法格式时，使用中括号[ ]通常表示可选，非必选，多分支结构中最后的 else 是可选的。</li><li>每个分支之间是有自己的逻辑的，不能随意颠倒顺序。</li><li>python不建议if-else嵌套结构，尽量使用if-elif-else的多分支选择结构。</li></ul><h4 id="三元条件运算符"><a href="#三元条件运算符" class="headerlink" title="三元条件运算符"></a>三元条件运算符</h4><p>Python 提供了三元运算符，三元运算符是条件语句中比较简练的一种赋值方式，用来在某些简单双分支赋值情况。三元运算符的语法结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = Y if X else Z</span><br></pre></td></tr></table></figure><p>其中如果X为真，那么就执行A=Y，如果X为假，就执行A=Z。</p><p>注：<strong>适用于简单的双分支结构</strong>。</p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>while循环的语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while 条件表达式:</span><br><span class="line">循环体语句</span><br></pre></td></tr></table></figure><p>while循环适用于不知道循环次数的循环结构，while循环通过一个能够产生或转换出bool值的<strong>条件表达式</strong>来控制循环，表达式的值为True则继续循环；表达式的值为False则结束循环。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = 1</span><br><span class="line">while n&lt;=10:</span><br><span class="line">print(n)</span><br><span class="line">n += 1</span><br></pre></td></tr></table></figure><p>可以构造死循环：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">while True：</span><br><span class="line">语句/语句块</span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>for循环的语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for 变量 in 可迭代对象:</span><br><span class="line">循环体语句</span><br></pre></td></tr></table></figure><p>for 循环用于遍历一个集合，每次循环，会从集合中取得一个元素，并执行一次代码块，直到集合中所有的元素都获取，for 循环才结束。可以遍历对象包括<strong>序列(字符串、列表、元组)、字典、迭代器对象(iterator)、生成器函数文件对象</strong>。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in range(10):</span><br><span class="line">print(i)  # 打印0-9</span><br></pre></td></tr></table></figure><p>特别说明：range()在python3中返回的是一个可迭代对象，而不是整数列表</p><ul><li>range(10)：返回一个0到9的可迭代对象，10为stop参数，到10结束，但不包括10。</li><li>range(1,11)：返回一个1到10的可迭代对象，1为start参数，默认从0开始。</li><li>range(1,11,2)返回一个1到10步长为2的可迭代对象，2为step参数，即每次递增的值为2，默认为1。</li><li>range(11,1,-2)步长为负数，表示每次递减的值为2，从11开始。</li></ul><p>遍历字符串，即对每个字符进行操作，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in &#x27;hello world&#x27;:</span><br><span class="line">print(i，end=&#x27;&#x27;) #打印hello world</span><br></pre></td></tr></table></figure><p>注意：print函数的end参数为以什么结尾，默认为以换行结尾。</p><h4 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h4><p>一个循环体内可以嵌入另一个循环，一般称为“嵌套循环”，或者“多重循环”。例如，利用嵌套循环—-打印九九乘法表：</p><p>for m in range(1,10): </p><pre><code>for m in range(1,10):     for n in range(1,m+1):         print(&quot;&#123;0&#125;*&#123;1&#125;=&#123;2&#125;&quot;.format(m,n,(m*n)),end=&quot;\t&quot;)     print()</code></pre><p>在上面的代码中，外层循环用来控制一共会产生<code>9</code>行的输出，而内层循环用来控制每一行会输出多少列。内层循环中的输出就是九九表一行中的所有列，所以在内层循环完成时，有一个<code>print()</code>来实现换行输出的效果。</p><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><p>break 语句可用于 while 和 for 循环，用来结束整个循环。 当有嵌套循环时，break 语句只能跳出最近一层的循环。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while True: </span><br><span class="line">    a = input(&quot;请输入一个字符（输入 Q 或 q 结束）&quot;) </span><br><span class="line">    if a.upper()==&#x27;Q&#x27;: </span><br><span class="line">        print(&quot;循环结束，退出&quot;) </span><br><span class="line">        break </span><br><span class="line">    else:</span><br><span class="line">        print(a)</span><br></pre></td></tr></table></figure><p>在上面的代码中，while 循环的条件语句是 True，因此进入 while 循环后，每次都会接收控制台输入的值赋给变量 a，判断 a 的值是否是“q”或者“Q”。当输入的值是“q”或者“Q”时，执行 break 语句退出循环。</p><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><p>与 break 语句对应的还有另一个 continue 语句，与 break 语句不同的是，continue 用于结束本次循环，继续下一次。多个循环嵌套时，continue 也是应用于最近的一层循环，而 break 语句用来彻底退出最近的一层循环。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#for 循环来遍历 10 以内的奇数 </span><br><span class="line">for i in range(1,10): </span><br><span class="line">    if i%2==0:</span><br><span class="line">continue </span><br><span class="line">    else:</span><br><span class="line">        print(i,end=&#x27;\t&#x27;)</span><br></pre></td></tr></table></figure><h4 id="循环里的else"><a href="#循环里的else" class="headerlink" title="循环里的else"></a>循环里的else</h4><p>当循环正常结束时，会继续执行else里的代码块，如遇到break(continue不行)强制退出循环，则不执行else里的代码。</p><p>continue跳过此次循环，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">for i in range(1,10): </span><br><span class="line">if i == 9:</span><br><span class="line">continue</span><br><span class="line">sum += i</span><br><span class="line">else:</span><br><span class="line">print(&#x27;sum&#x27;)  # 计算1-8的和并输出</span><br></pre></td></tr></table></figure><p>break跳出循环，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">for i in range(1,10): </span><br><span class="line">if i == 9:</span><br><span class="line">continue</span><br><span class="line">sum += i</span><br><span class="line">else:</span><br><span class="line">print(&#x27;sum&#x27;)  # 计算1-8的和但不输出</span><br></pre></td></tr></table></figure><p><em><strong>while</strong></em>同理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;分支结构&quot;&gt;&lt;a href=&quot;#分支结构&quot; class=&quot;headerlink&quot; title=&quot;分支结构&quot;&gt;&lt;/a&gt;分支结构&lt;/h3&gt;&lt;h4 id=&quot;单分支&quot;&gt;&lt;a href=&quot;#单分支&quot; class=&quot;headerlink&quot; title=&quot;单分支&quot;&gt;&lt;/a&gt;单分</summary>
      
    
    
    
    
    <category term="python基础" scheme="https://xiaowog.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python基础第2课-运算符和基础语法</title>
    <link href="https://xiaowog.top/2022/02/05/python%E5%9F%BA%E7%A1%80%E7%AC%AC2%E8%AF%BE-%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://xiaowog.top/2022/02/05/python%E5%9F%BA%E7%A1%80%E7%AC%AC2%E8%AF%BE-%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2022-02-05T10:37:54.000Z</published>
    <updated>2022-02-14T03:25:47.130Z</updated>
    
    <content type="html"><![CDATA[<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>**</code></td><td align="center">指数</td></tr><tr><td align="center"><code>~</code> <code>+</code> <code>-</code></td><td align="center">按位取反，正负号</td></tr><tr><td align="center"><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td align="center">乘，除，模，整除</td></tr><tr><td align="center"><code>+</code> <code>-</code></td><td align="center">加减</td></tr><tr><td align="center"><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td align="center">右移，左移</td></tr><tr><td align="center"><code>&amp;</code></td><td align="center">按位与</td></tr><tr><td align="center"><code>^</code>  `</td><td align="center">`</td></tr><tr><td align="center"><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td align="center">小于等于，小于，大于，大于等于</td></tr><tr><td align="center"><code>==</code>  <code>!=</code></td><td align="center">等于，不等于</td></tr><tr><td align="center"><code>is</code> <code>is not</code></td><td align="center">身份运算符</td></tr><tr><td align="center"><code>in</code> <code>not in</code></td><td align="center">成员运算符</td></tr><tr><td align="center"><code>not</code> <code>or</code> <code>and</code></td><td align="center">逻辑运算符</td></tr><tr><td align="center"><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code></td><td align="center">赋值运算符</td></tr></tbody></table><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><ul><li>乘 —- 两数相乘或是返回一个被重复若干次的字符串</li><li>除 —- <code>21 / 10 = 2.1</code></li><li>取模 —- 返回除法的余数</li><li>整除 —- 向下取整 —- <code>26 // 10 = 2</code></li></ul><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><ul><li>等于 —- 比较两个变量的值是否相等（注意与is区分）</li><li>不等于 —- 比较两个变量的值是否不相等</li></ul><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = 10</span><br><span class="line">b = 3</span><br><span class="line">a += b        # 相当于：a = a + b</span><br><span class="line">a *= a + 2    # 相当于：a = a * (a + 2)</span><br><span class="line">print(a)      # 算一下这里会输出什么</span><br></pre></td></tr></table></figure><p>尽量别使用。</p><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><ul><li>按位与：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</li><li>按位或：只要对应的二个二进位有一个为1时，结果位就为1。</li><li>按位异或：当两对应的二进位相异时，结果为1。</li><li>按位反：对数据的每个二进制位取反,即把1变为0,把0变为1。<code>~x</code> 类似于 <code>-x-1</code></li><li>左移，右移运算符：<code>x&lt;&lt; 4</code> 等同于 <code>x*(2**4)</code>，同样右移是整除</li></ul><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><ul><li>and —- 同为True才返回True，否则返回False</li><li>or —- 同为False才返回False，否则返回True</li><li>not —- 取反，True变False，False变True</li></ul><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><ul><li>in —- 如果在指定的序列中找到值返回 True，否则返回 False。</li><li>not in —- 如果在指定的序列中没有找到值返回 True，否则返回 False。</li></ul><h4 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h4><ul><li>is —-is 是判断两个标识符是不是引用自一个对象，是则返回True，不是则是False—-类似于 <code>id(x)==id(y)</code></li><li>is not —-同理</li></ul><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h4><p>不必记，认识就好。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;False&#x27;, &#x27;None&#x27;, &#x27;True&#x27;, &#x27;and&#x27;, &#x27;as&#x27;, &#x27;assert&#x27;, &#x27;break&#x27;, &#x27;class&#x27;, &#x27;continue&#x27;, &#x27;def&#x27;, &#x27;del&#x27;, &#x27;elif&#x27;, &#x27;else&#x27;, &#x27;except&#x27;, &#x27;finally&#x27;, &#x27;for&#x27;, &#x27;from&#x27;, &#x27;global&#x27;, &#x27;if&#x27;, &#x27;import&#x27;, &#x27;in&#x27;, &#x27;is&#x27;, &#x27;lambda&#x27;, &#x27;nonlocal&#x27;, &#x27;not&#x27;, &#x27;or&#x27;, &#x27;pass&#x27;, &#x27;raise&#x27;, &#x27;return&#x27;, &#x27;try&#x27;, &#x27;while&#x27;, &#x27;with&#x27;, &#x27;yield&#x27;]</span><br></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>注释符号包括<code>#内容</code> <code>&quot;&quot;&quot;内容&quot;&quot;&quot;</code> <code>&#39;&#39;&#39;内容&#39;&#39;&#39;</code> </p><h4 id="代码的组织和缩进"><a href="#代码的组织和缩进" class="headerlink" title="代码的组织和缩进"></a>代码的组织和缩进</h4><p>Python 语言是通过缩进来组织代码块，“缩进”成为了 Python 语法强制的规定。缩进时，几个空格都是允许的，但必须同意，通常采用“四个空格”表示一个缩进，一般等于一个tab键。</p><h4 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h4><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 \ 来实现多行语句，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure><p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 \，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total = [&#x27;item_one&#x27;, &#x27;item_two&#x27;, &#x27;item_three&#x27;,</span><br><span class="line">        &#x27;item_four&#x27;, &#x27;item_five&#x27;]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h3&gt;&lt;h4 id=&quot;优先级&quot;&gt;&lt;a href=&quot;#优先级&quot; class=&quot;headerlink&quot; title=&quot;优先级&quot;&gt;&lt;/a&gt;优先级&lt;/h</summary>
      
    
    
    
    
    <category term="python基础" scheme="https://xiaowog.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python基础第1课--环境搭建和变量</title>
    <link href="https://xiaowog.top/2022/02/03/python%E5%9F%BA%E7%A1%80%E7%AC%AC1%E8%AF%BE-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%8F%98%E9%87%8F/"/>
    <id>https://xiaowog.top/2022/02/03/python%E5%9F%BA%E7%A1%80%E7%AC%AC1%E8%AF%BE-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%8F%98%E9%87%8F/</id>
    <published>2022-02-03T02:16:17.000Z</published>
    <updated>2022-02-14T03:25:39.279Z</updated>
    
    <content type="html"><![CDATA[<h3 id="win11搭建python环境"><a href="#win11搭建python环境" class="headerlink" title="win11搭建python环境"></a><strong>win11搭建python环境</strong></h3><h4 id="下载anaconda安装包"><a href="#下载anaconda安装包" class="headerlink" title="下载anaconda安装包"></a>下载<a class="link" href="https://www.anaconda.com/products/individual">anaconda<i class="fas fa-external-link-alt"></i></a>安装包</h4><p><img lazyload src="/images/loading.svg" data-src="1.png" alt="1"></p><p>打开安装包，一路点next就好，更改路径时<strong>大家路径里面请不要带中文、空格</strong>，否则报错很麻烦。</p><p>然后配置anaconda环境配置：右击桌面选择显示设置，然后在系统关于中找到高级系统设置，然后点击环境变量，</p><p><img lazyload src="/images/loading.svg" data-src="2.png" alt="2"></p><p><img lazyload src="/images/loading.svg" data-src="3.png" alt="3"></p><p><img lazyload src="/images/loading.svg" data-src="4.png" alt="4"></p><p>然后在用户变量中编辑Path，</p><p><img lazyload src="/images/loading.svg" data-src="5.png" alt="5"></p><p>新建四个路径，</p><p><img lazyload src="/images/loading.svg" data-src="6.png" alt="6"></p><p>然后在cmd中验证，输入python，</p><p><img lazyload src="/images/loading.svg" data-src="7.png" alt="7"></p><p>如果跳转到windows应用商店中，你只需把那四条路径上移置顶即可。</p><h4 id="下载Pycharm"><a href="#下载Pycharm" class="headerlink" title="下载Pycharm"></a><strong>下载Pycharm</strong></h4><p>他家的开发工具非常好用，我们只需下载社区版即可，想要专业版的也可私聊我，<a class="link" href="https://www.jetbrains.com/pycharm/download/#section=windows">下载地址<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload src="/images/loading.svg" data-src="8.png" alt="8"></p><p>有了 exe 文件双击打开一路点 next 就可以了，安装完成，打开pycharm，点击New  Project，</p><p><img lazyload src="/images/loading.svg" data-src="9.png" alt="9"></p><p>然后把 Location 换成自己选择的路径，然后点击红色标注出来三角，然后选择第二个，选择的就是刚刚咱们安装的 anaconda 环境目录中的 python.exe 执行文件，后“create”就好。</p><p><img lazyload src="/images/loading.svg" data-src="10.png" alt="10"></p><p>然后右击文件，新建 python file，</p><p><img lazyload src="/images/loading.svg" data-src="11.png" alt="11"></p><h4 id="下表为Pycharm常用快捷键"><a href="#下表为Pycharm常用快捷键" class="headerlink" title="下表为Pycharm常用快捷键"></a>下表为Pycharm常用快捷键</h4><table><thead><tr><th align="center">快捷键</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">ctrl + /</td><td align="center">注释/反注释代码</td></tr><tr><td align="center">ctrl + alt + l</td><td align="center">格式化代码</td></tr><tr><td align="center">F2</td><td align="center">快速定位到错误代码</td></tr><tr><td align="center">alt + enter</td><td align="center">万能代码修复快捷键</td></tr><tr><td align="center">ctrl + j</td><td align="center">显示可用的代码</td></tr><tr><td align="center">ctrl + d / ctrl + y</td><td align="center">复制/删除一行代码</td></tr></tbody></table><h3 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a><strong>变量和类型</strong></h3><h4 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h4><ul><li>整型（int）：整数，支持二进制，八进制，十进制，十六进制的表示法。</li><li>浮点型（float）：小数，也支持科学计数法。</li><li>字符串型（str）：字符串是以单引号或双引号括起来的任意文本。</li><li>布尔型（bool）：只有True，False两种值（注意开头大写）。</li></ul><p>不同类型的变量可以相互转换，这一点可以通过Python的内置函数来实现。</p><ul><li>int（）：将一个数值或字符串（只含有数字）转换成整数，可以指定进制。</li><li>float（）：将一个字符串（只含有数字）或整数转换成浮点数。</li><li>str()：将指定的对象转换成字符串形式，可以指定编码。</li><li>chr()：将整数转换成该编码对应的字符串（一个字符）。</li><li>ord()：将字符串（一个字符）转换成对应的编码（整数）。</li></ul><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>Python 中，一切皆对象。每个对象由：标识（identity）、类型（type）、value（值）组成。对象的<strong>本质</strong>就是：<strong>一个内存块，拥有特定的值，支持特定类型的相关操作</strong>。 </p><ol><li>标识用于唯一标识对象，通常对应于对象在计算机内存中的地址。使用内置函数id(obj)可返回对象 obj 的标识。 </li><li>类型用于表示对象存储的“数据”的类型。类型可以限制对象的取值范围以及可执行的操作。可以使用 type(obj)获得对象的所属类型。</li><li>值表示对象所存储的数据的信息。使用 print(obj)可以直接打印出值。</li></ol><p>在 Python 中，变量即对象的引用。因为，变量存储的就是对象的地址。变量通过地址引用了“对象”。变量位于<strong>栈内存</strong>，对象位于<strong>堆内存</strong>。 </p><p>Python是动态类型，强类型语言：变量不需要显式声明类型，每个对象都有数据类型，只支持该类型支持的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = 3</span><br><span class="line">id(a) # 1531372336</span><br><span class="line">type(a) # &lt;class &#x27;int&#x27;&gt;</span><br><span class="line"></span><br><span class="line">b = &#x27;我爱你&#x27;</span><br><span class="line">id(b) # 46806816</span><br><span class="line">type(b) # &lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure><p><img lazyload src="/images/loading.svg" data-src="12.png" alt="12"></p><h4 id="变量的声明和赋值"><a href="#变量的声明和赋值" class="headerlink" title="变量的声明和赋值"></a>变量的声明和赋值</h4><p>变量的声明和赋值用于将一个变量绑定到一个对象上，语法结构如下：</p><p><code>变量名 = 变量值</code></p><p>最简单的表达式就是字面量。如：a = 123。运行过程中，解释器先运行右边的表达式，生成一个代表表达式运算结果的对象，然后，将这个对象地址赋值给左边的变量。 </p><p>在python中，声明变量的同时需要为其赋值，否则会报错。</p><h4 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h4><ul><li>硬性规则：<ul><li>变量名由<strong>字母</strong>、数字和<strong>下划线</strong>构成，数字不能开头。</li><li>区分大小写</li><li>变量名不要跟Python语言的<strong>关键字</strong>和<strong>保留字</strong>发生重名的冲突。</li></ul></li><li>非硬性规则（PEP8）：<ul><li>见名知义。</li><li>变量名通常使用小写英文字母，多个单词用下划线进行连接。</li><li>受保护的变量用单个下划线开头。</li><li>私有的变量用两个下划线开头。</li></ul></li></ul><p>非硬性规则的2和3大家暂时不用理解，后面自然会明白的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;win11搭建python环境&quot;&gt;&lt;a href=&quot;#win11搭建python环境&quot; class=&quot;headerlink&quot; title=&quot;win11搭建python环境&quot;&gt;&lt;/a&gt;&lt;strong&gt;win11搭建python环境&lt;/strong&gt;&lt;/h3&gt;&lt;h4 </summary>
      
    
    
    
    
    <category term="python基础" scheme="https://xiaowog.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>壁纸网站收录</title>
    <link href="https://xiaowog.top/2022/02/01/%E5%A3%81%E7%BA%B8%E7%BD%91%E7%AB%99%E6%94%B6%E5%BD%95/"/>
    <id>https://xiaowog.top/2022/02/01/%E5%A3%81%E7%BA%B8%E7%BD%91%E7%AB%99%E6%94%B6%E5%BD%95/</id>
    <published>2022-02-01T03:55:32.000Z</published>
    <updated>2022-02-01T04:41:26.297Z</updated>
    
    <content type="html"><![CDATA[<h4 id="该文章整理了小薛白嫖壁纸的超香网站。"><a href="#该文章整理了小薛白嫖壁纸的超香网站。" class="headerlink" title="该文章整理了小薛白嫖壁纸的超香网站。"></a>该文章整理了小薛白嫖壁纸的超香网站。</h4><p>经典，典中典：<a class="link" href="https://wallhaven.cc/">wallhaven<i class="fas fa-external-link-alt"></i></a>，这网站已经是众所周知了，是小薛最初壁纸的来源，各种尺寸，各种类型应有尽有，唯一缺点是该网站是英文的有点不友好，特别是对我这样的英语大白菜。</p><p><img lazyload src="/images/loading.svg" data-src="bz1.png" alt="1"></p><p>中文网站：<a class="link" href="https://wall.alphacoders.com/?lang=Chinese">wallpaper Abyss<i class="fas fa-external-link-alt"></i></a>,主题分类的搜索也很好，小薛刚从上面拿了张猎魔人的壁纸，直接爱住了。</p><p><img lazyload src="/images/loading.svg" data-src="bz2.png" alt="2"></p><p>宝藏：<a class="link" href="https://desktopography.net/">Desktopography<i class="fas fa-external-link-alt"></i></a>，这是一个2005年推出的一个非盈利项目，里面的壁纸真的非常精美，那里的东西适合每个人。</p><p><img lazyload src="/images/loading.svg" data-src="bz3.png" alt="3"></p><p>win风收录站：<a class="link" href="https://wallpaperhub.app/">wallpaperhub<i class="fas fa-external-link-alt"></i></a>，网站收录了win系统的壁纸，和surfcae等壁纸，办公风yyds。</p><p><img lazyload src="/images/loading.svg" data-src="bz4.png" alt="4"></p><p>此次分享就这么四个网站，感谢阅读，以后还会收录一些其他类型网站。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;该文章整理了小薛白嫖壁纸的超香网站。&quot;&gt;&lt;a href=&quot;#该文章整理了小薛白嫖壁纸的超香网站。&quot; class=&quot;headerlink&quot; title=&quot;该文章整理了小薛白嫖壁纸的超香网站。&quot;&gt;&lt;/a&gt;该文章整理了小薛白嫖壁纸的超香网站。&lt;/h4&gt;&lt;p&gt;经典，典中典</summary>
      
    
    
    
    
    <category term="网站收录" scheme="https://xiaowog.top/tags/%E7%BD%91%E7%AB%99%E6%94%B6%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客遇到的坑（1）</title>
    <link href="https://xiaowog.top/2022/01/30/Hexo%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%EF%BC%881%EF%BC%89/"/>
    <id>https://xiaowog.top/2022/01/30/Hexo%E5%8D%9A%E5%AE%A2%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%EF%BC%881%EF%BC%89/</id>
    <published>2022-01-30T11:07:25.000Z</published>
    <updated>2022-02-11T07:21:05.605Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基于Hexo和Github搭建的博客，手机端访问不了，怎么办？"><a href="#1-基于Hexo和Github搭建的博客，手机端访问不了，怎么办？" class="headerlink" title="1.基于Hexo和Github搭建的博客，手机端访问不了，怎么办？"></a>1.基于Hexo和Github搭建的博客，手机端访问不了，怎么办？</h3><p>因为是在国内，所以无论是访问Github还是Github所提供的服务都是不稳定的。电脑端能访问的原因大概率是因为科学上网的缘故，手机端无法访问是因为其拒绝了域名解析所用的ip地址。</p><p>解决方法：</p><p>重新ping一下你的GitHub项目的地址，打开命令提示符cmd，输入<em><strong>ping 仓库名</strong></em>，如下图：</p><p><img lazyload src="/images/loading.svg" data-src="hexo1.png" alt="1"></p><p>可以知道当前ip是185.199.109.153</p><p>然后到域名DNS解析中，添加A记录值为上述ping到的ip，到此可以解决了。</p><h3 id="2-Typora（Markdown）可以载入本地图片，而网页无法载入？"><a href="#2-Typora（Markdown）可以载入本地图片，而网页无法载入？" class="headerlink" title="2.Typora（Markdown）可以载入本地图片，而网页无法载入？"></a>2.Typora（Markdown）可以载入本地图片，而网页无法载入？</h3><p>原因：本地图片是靠相对路径载入的，而当上传网页时，它们的相对路径会发生改变。</p><p>解决方法：</p><p>在blog目录下打开git控制台，安装图片插件，输入<em><strong>npm install hexo-asset-image –save</strong></em>。</p><p>然后打开blog目录下的_config.yml文件，将<strong>post_asset_folder</strong>改为<strong>true</strong>。</p><p>然后重新new一个md文件，或者在原md文件处新建一个同名的文件夹来存放照片，将相对路径直接改成照片名，因为当你上传网页时，他们会被放入同一个文件夹。</p><p><img lazyload src="/images/loading.svg" data-src="hexo2.png" alt="2"></p><p>我也被上述问题困扰了一下午，网上的方法大部分不好使，当然也有提出别的备用方案，如用gitee代替github，采用图床的方法等等，但都不符合我的预期，所以做了这个博客希望能给各位提供帮助。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-基于Hexo和Github搭建的博客，手机端访问不了，怎么办？&quot;&gt;&lt;a href=&quot;#1-基于Hexo和Github搭建的博客，手机端访问不了，怎么办？&quot; class=&quot;headerlink&quot; title=&quot;1.基于Hexo和Github搭建的博客，手机端访问</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://xiaowog.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Github搭建个人博客（上）</title>
    <link href="https://xiaowog.top/2022/01/30/Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://xiaowog.top/2022/01/30/Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2022-01-30T07:02:09.000Z</published>
    <updated>2022-01-31T03:27:52.409Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a><strong>安装Node.js</strong></h3><p>先下载<a class="link" href="https://nodejs.org/en/download/">稳定版<i class="fas fa-external-link-alt"></i></a>（LTS），安装选项选默认（想改路径可以），一路Next。</p><p>安装好之后，按<strong>win+R</strong>输入<em><strong>cmd</strong></em>打开命令提示符，输入<em><strong>node -v</strong></em>和<em><strong>npm -v</strong></em>，如果出现版本号，则安装就完成了</p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a><strong>安装Git</strong></h3><p>为了把本地文件上传到Github上面去，我们需要分布式版本控制工具———<a class="link" href="https://git-scm.com/download/win">Git<i class="fas fa-external-link-alt"></i></a></p><p>安装选项还是默认，路径随意，安装完成之后，打开命令提示符，输入<em><strong>git -v</strong></em>，如果不报错，则证明安装成功。</p><h3 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a><strong>注册Github账号</strong></h3><p>打开<a class="link" href="https://github.com/">官网<i class="fas fa-external-link-alt"></i></a>，注册流程很简单，注册完成登录。</p><p>注意：网站有时不好使，因为是在国内访问的原因，如果无法打开，则等待几个小时后在去访问，或者有能力的可以了解科学上网（私聊博主可获取秘密武器哦）</p><p>新建一个项目，如图所示：</p><p><img lazyload src="/images/loading.svg" data-src="hexo1.png" alt="1"></p><p>输入项目名，名称一定要和你的GitHub名字一样，后面要加.github.io，README的初始化最好也点上，如图所示：</p><p><img lazyload src="/images/loading.svg" data-src="hexo2.png" alt="2"></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a><strong>安装Hexo</strong></h3><p>在一个合适的地方新建一个文件夹，用来存放自己的博客文件，在该目录下右击，点<strong>Git Bash Here</strong>，打开git控制台窗口，<u>以后我们所有的操作将都在git控制台进行</u>。在控制台中输入 <em><strong>npm i hexo-cli -g</strong></em> 安装Hexo。</p><p>安装完后输入<em><strong>hexo -v</strong></em>验证是否安装成功。</p><p>然后就要初始化我们的网站，输入<em><strong>hexo init blog</strong></em>初始化文件，接着输入<em><strong>cd blog</strong></em> ，然后输入<em><strong>npm install</strong></em>安装必备的组件。</p><p>这样本地的网站配置也弄好了，输入<em><strong>hexo g</strong></em>生成静态网页，然后输入<em><strong>hexo s</strong></em>打开本地服务器，然后浏览器访问<a class="link" href="http://localhost:4000/">http://localhost:4000/<i class="fas fa-external-link-alt"></i></a> ，就可以看到我们的熟悉的Hello World了，效果如下：</p><p><img lazyload src="/images/loading.svg" data-src="hexo3.png" alt="3"></p><p>返回控制台按<strong>ctrl+c</strong>关闭本地服务器</p><h3 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a><strong>连接Github与本地</strong></h3><p>首先在任意地方右击打开 <strong>Git Bash Here</strong>，然后输入下面的命令：</p><p><img lazyload src="/images/loading.svg" data-src="hexo4.png" alt="4"></p><p>注意：用户名和邮箱请修改成你GitHub的消息，name和email后有空格</p><p>输入如下命令，按三次回车，然后生成密钥SSH key</p><p><img lazyload src="/images/loading.svg" data-src="hexo5.png" alt="5"></p><p>然后到上面提示的地址里用记事本打开id_rsa.pub，复制里面的内容</p><p><img lazyload src="/images/loading.svg" data-src="hexo6.png" alt="6"></p><p>打开<a class="link" href="https://github.com/">GitHub<i class="fas fa-external-link-alt"></i></a> ，头像下面点击<strong>Setting</strong>，</p><p><img lazyload src="/images/loading.svg" data-src="hexo7.png" alt="7"></p><p>再点击<strong>SSH and GPG keys</strong>，新建一个SSH，名字随便起。</p><p><img lazyload src="/images/loading.svg" data-src="hexo8.png" alt="8"></p><p>然后将记事本复制的内容复制到框中，点击确认保存。</p><p><img lazyload src="/images/loading.svg" data-src="hexo9.png" alt="9"></p><p>然后到git控制台中输入<em><strong>ssh -T  <a class="link" href="mailto:&#103;&#105;&#116;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#109;">&#103;&#105;&#116;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#98;&#x2e;&#x63;&#111;&#109;<i class="fas fa-external-link-alt"></i></a></strong></em>，第一次提示输入yes，然后如果出现你的用户名，那就成功了，如下图示。</p><p><img lazyload src="/images/loading.svg" data-src="hexo10.png" alt="10"></p><h3 id="配置并上传网站"><a href="#配置并上传网站" class="headerlink" title="配置并上传网站"></a><strong>配置并上传网站</strong></h3><p>打开博客目录下的**_config.yml**文件，这是博客的配置文件，在这里你可以修改博客的相关信息，现在，只修改最后一行配置：</p><p><img lazyload src="/images/loading.svg" data-src="hexo11.png" alt="11"></p><p>将<strong>respository</strong>修改为你自己的GitHub项目地址(ssh)。</p><p><img lazyload src="/images/loading.svg" data-src="hexo12.png" alt="12"></p><p>然后返回文件夹中右击打开git控制台，输入<em><strong>npm install hexo-deployer-git –save</strong></em>,安装git插件，</p><p>然后输入<em><strong>hexo g</strong></em>和<em><strong>hexo d</strong></em>上传到GitHub上。这是你打开你的io主页就能看到你上传的博客网站了。</p><p><img lazyload src="/images/loading.svg" data-src="hexo13.png" alt="13"></p><h3 id="绑定域名（没有可忽略，直接用io网址访问即可）"><a href="#绑定域名（没有可忽略，直接用io网址访问即可）" class="headerlink" title="绑定域名（没有可忽略，直接用io网址访问即可）"></a><strong>绑定域名（没有可忽略，直接用io网址访问即可）</strong></h3><p>想要更换域名，可以自己到卖域名的平台买个域名，XX云都能买。</p><p><img lazyload src="/images/loading.svg" data-src="hexo14.png" alt="14"></p><p>然后买完之后，点击解析，添加两条解析记录，第二条，主机记录为www，记录类型为CNAME，记录值为你GitHub项目page里的那个地址，然后第一条，主机记录为@，记录类型为A，记录值为你通过命令提示符窗口ping第二条记录值得到的ip！！</p><p><img lazyload src="/images/loading.svg" data-src="hexo15.png" alt="15"></p><p><img lazyload src="/images/loading.svg" data-src="hexo16.png" alt="16"></p><p>打开你本地博客目录中source文件夹，新建文本文件，然后在里面写上你的域名，保存，然后重命名删除后缀。最后运行<em><strong>hexo g</strong></em>和<em><strong>hexo d</strong></em>上传到github。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装Node-js&quot;&gt;&lt;a href=&quot;#安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;安装Node.js&quot;&gt;&lt;/a&gt;&lt;strong&gt;安装Node.js&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;先下载&lt;a class=&quot;link&quot; href=&quot;</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://xiaowog.top/tags/hexo/"/>
    
  </entry>
  
</feed>
