<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="https://xiaowog.top/atom.xml" rel="self"/>
  
  <link href="https://xiaowog.top/"/>
  <updated>2022-02-03T05:04:46.285Z</updated>
  <id>https://xiaowog.top/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python基础第一课--环境搭建和变量</title>
    <link href="https://xiaowog.top/2022/02/03/python%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%B8%80%E8%AF%BE-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%8F%98%E9%87%8F/"/>
    <id>https://xiaowog.top/2022/02/03/python%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%B8%80%E8%AF%BE-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%92%8C%E5%8F%98%E9%87%8F/</id>
    <published>2022-02-03T02:16:17.000Z</published>
    <updated>2022-02-03T05:04:46.285Z</updated>
    
    <content type="html"><![CDATA[<h3 id="win11搭建python环境"><a href="#win11搭建python环境" class="headerlink" title="win11搭建python环境"></a><strong>win11搭建python环境</strong></h3><h4 id="下载anaconda安装包"><a href="#下载anaconda安装包" class="headerlink" title="下载anaconda安装包"></a>下载<a class="link" href="https://www.anaconda.com/products/individual">anaconda<i class="fas fa-external-link-alt"></i></a>安装包</h4><p><img lazyload src="/images/loading.svg" data-src="1.png" alt="1"></p><p>打开安装包，一路点next就好，更改路径时<strong>大家路径里面请不要带中文、空格</strong>，否则保存很恶心。</p><p>然后配置anaconda环境配置：右击桌面选择显示设置，然后在系统关于中找到高级系统设置，然后点击环境变量，</p><p><img lazyload src="/images/loading.svg" data-src="2.png" alt="2"></p><p><img lazyload src="/images/loading.svg" data-src="3.png" alt="3"></p><p><img lazyload src="/images/loading.svg" data-src="4.png" alt="4"></p><p>然后在用户变量中编辑Path，</p><p><img lazyload src="/images/loading.svg" data-src="5.png" alt="5"></p><p>新建四个路径，</p><p><img lazyload src="/images/loading.svg" data-src="6.png" alt="6"></p><p>然后在cmd中验证，输入python，</p><p><img lazyload src="/images/loading.svg" data-src="7.png" alt="7"></p><p>如果跳转到windows应用商店中，你只需把那四条路径上移置顶即可。</p><h4 id="下载Pycharm"><a href="#下载Pycharm" class="headerlink" title="下载Pycharm"></a><strong>下载Pycharm</strong></h4><p>他家的开发工具非常好用，我们只需下载社区版即可，想要专业版的也可私聊我，<a class="link" href="https://www.jetbrains.com/pycharm/download/#section=windows">下载地址<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload src="/images/loading.svg" data-src="8.png" alt="8"></p><p>有了 exe 文件双击打开一路点 next 就可以了，安装完成，打开pycharm，点击New  Project，</p><p><img lazyload src="/images/loading.svg" data-src="9.png" alt="9"></p><p>然后把 Location 换成自己选择的路径，然后点击红色标注出来三角，然后选择第二个，选择的就是刚刚咱们安装的 anaconda 环境目录中的 python.exe 执行文件，后“create”就好。</p><p><img lazyload src="/images/loading.svg" data-src="10.png" alt="10"></p><p>然后右击文件，新建 python file，</p><p><img lazyload src="/images/loading.svg" data-src="11.png" alt="11"></p><h4 id="下表为Pycharm常用快捷键"><a href="#下表为Pycharm常用快捷键" class="headerlink" title="下表为Pycharm常用快捷键"></a>下表为Pycharm常用快捷键</h4><table><thead><tr><th align="center">快捷键</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">ctrl + /</td><td align="center">注释/反注释代码</td></tr><tr><td align="center">ctrl + alt + l</td><td align="center">格式化代码</td></tr><tr><td align="center">F2</td><td align="center">快速定位到错误代码</td></tr><tr><td align="center">alt + enter</td><td align="center">万能代码修复快捷键</td></tr><tr><td align="center">ctrl + j</td><td align="center">显示可用的代码</td></tr><tr><td align="center">ctrl + d / ctrl + y</td><td align="center">复制/删除一行代码</td></tr></tbody></table><h3 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a><strong>变量和类型</strong></h3><h4 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h4><ul><li>整型（int）：整数，支持二进制，八进制，十进制，十六进制的表示法。</li><li>浮点型（float）：小数，也支持科学计数法。</li><li>字符串型（str）：字符串是以单引号或双引号括起来的任意文本。</li><li>布尔型（bool）：只有True，False两种值（注意开头大写）。</li></ul><p>不同类型的变量可以相互转换，这一点可以通过Python的内置函数来实现。</p><ul><li>int（）：将一个数值或字符串（只含有字符串）转换成整数，可以指定进制。</li><li>float（）：将一个字符串（只含有数字）或整数转换成浮点数。</li><li>str()：将指定的对象转换成字符串形式，可以指定编码。</li><li>chr()：将整数转换成该编码对应的字符串（一个字符）。</li><li>ord()：将字符串（一个字符）转换成对应的编码（整数）。</li></ul><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>Python 中，一切皆对象。每个对象由：标识（identity）、类型（type）、value（值）组成。对象的<strong>本质</strong>就是：<strong>一个内存块，拥有特定的值，支持特定类型的相关操作</strong>。 </p><ol><li>标识用于唯一标识对象，通常对应于对象在计算机内存中的地址。使用内置函数id(obj)可返回对象 obj 的标识。 </li><li>类型用于表示对象存储的“数据”的类型。类型可以限制对象的取值范围以及可执行的操作。可以使用 type(obj)获得对象的所属类型。</li><li>值表示对象所存储的数据的信息。使用 print(obj)可以直接打印出值。</li></ol><p>在 Python 中，变量即对象的引用。因为，变量存储的就是对象的地址。变量通过地址引用了“对象”。变量位于<strong>栈内存</strong>，对象位于<strong>堆内存</strong>。 </p><p>Python是动态类型，强类型语言：变量不需要显式声明类型，每个对象都有数据类型，只支持该类型支持的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = 3</span><br><span class="line">id(a) # 1531372336</span><br><span class="line">type(a) # &lt;class &#x27;int&#x27;&gt;</span><br><span class="line"></span><br><span class="line">b = &#x27;我爱你&#x27;</span><br><span class="line">id(b) # 46806816</span><br><span class="line">type(b) # &lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure><p><img lazyload src="/images/loading.svg" data-src="12.png" alt="12"></p><h4 id="变量的声明和赋值"><a href="#变量的声明和赋值" class="headerlink" title="变量的声明和赋值"></a>变量的声明和赋值</h4><p>变量的声明和赋值用于将一个变量绑定到一个对象上，语法结构如下：<br>$$<br>变量名 = 变量值<br>$$<br>最简单的表达式就是字面量。如：a = 123。运行过程中，解释器先运行右边的表达式，生成一个代表表达式运算结果的对象，然后，将这个对象地址赋值给左边的变量。 </p><p>在python中，声明变量的同时需要为其赋值，否则会报错。</p><h4 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h4><ul><li>硬性规则：<ul><li>变量名由<strong>字母</strong>、数字和<strong>下划线</strong>构成，数字不能开头。</li><li>区分大小写</li><li>变量名不要跟Python语言的<strong>关键字</strong>和<strong>保留字</strong>发生重名的冲突。</li></ul></li><li>非硬性规则（PEP8）：<ul><li>见名知义。</li><li>变量名通常使用小写英文字母，多个单词用下划线进行连接。</li><li>受保护的变量用单个下划线开头。</li><li>私有的变量用两个下划线开头。</li></ul></li></ul><p>非硬性规则的2和3大家暂时不用理解，后面自然会明白的。</p><h4 id="代码的组织和缩进"><a href="#代码的组织和缩进" class="headerlink" title="代码的组织和缩进"></a>代码的组织和缩进</h4><p>Python 语言是通过缩进来组织代码块，“缩进”成为了 Python 语法强制的规定。缩进时，几个空格都是允许的，但必须同意，通常采用“四个空格”表示一个缩进，一般等于一个tab键。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;win11搭建python环境&quot;&gt;&lt;a href=&quot;#win11搭建python环境&quot; class=&quot;headerlink&quot; title=&quot;win11搭建python环境&quot;&gt;&lt;/a&gt;&lt;strong&gt;win11搭建python环境&lt;/strong&gt;&lt;/h3&gt;&lt;h4 </summary>
      
    
    
    
    
    <category term="python基础" scheme="https://xiaowog.top/tags/python%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>壁纸网站收录</title>
    <link href="https://xiaowog.top/2022/02/01/%E5%A3%81%E7%BA%B8%E7%BD%91%E7%AB%99%E6%94%B6%E5%BD%95/"/>
    <id>https://xiaowog.top/2022/02/01/%E5%A3%81%E7%BA%B8%E7%BD%91%E7%AB%99%E6%94%B6%E5%BD%95/</id>
    <published>2022-02-01T03:55:32.000Z</published>
    <updated>2022-02-01T04:41:26.297Z</updated>
    
    <content type="html"><![CDATA[<h4 id="该文章整理了小薛白嫖壁纸的超香网站。"><a href="#该文章整理了小薛白嫖壁纸的超香网站。" class="headerlink" title="该文章整理了小薛白嫖壁纸的超香网站。"></a>该文章整理了小薛白嫖壁纸的超香网站。</h4><p>经典，典中典：<a class="link" href="https://wallhaven.cc/">wallhaven<i class="fas fa-external-link-alt"></i></a>，这网站已经是众所周知了，是小薛最初壁纸的来源，各种尺寸，各种类型应有尽有，唯一缺点是该网站是英文的有点不友好，特别是对我这样的英语大白菜。</p><p><img lazyload src="/images/loading.svg" data-src="bz1.png" alt="1"></p><p>中文网站：<a class="link" href="https://wall.alphacoders.com/?lang=Chinese">wallpaper Abyss<i class="fas fa-external-link-alt"></i></a>,主题分类的搜索也很好，小薛刚从上面拿了张猎魔人的壁纸，直接爱住了。</p><p><img lazyload src="/images/loading.svg" data-src="bz2.png" alt="2"></p><p>宝藏：<a class="link" href="https://desktopography.net/">Desktopography<i class="fas fa-external-link-alt"></i></a>，这是一个2005年推出的一个非盈利项目，里面的壁纸真的非常精美，那里的东西适合每个人。</p><p><img lazyload src="/images/loading.svg" data-src="bz3.png" alt="3"></p><p>win风收录站：<a class="link" href="https://wallpaperhub.app/">wallpaperhub<i class="fas fa-external-link-alt"></i></a>，网站收录了win系统的壁纸，和surfcae等壁纸，办公风yyds。</p><p><img lazyload src="/images/loading.svg" data-src="bz4.png" alt="4"></p><p>此次分享就这么四个网站，感谢阅读，以后还会收录一些其他类型网站。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;该文章整理了小薛白嫖壁纸的超香网站。&quot;&gt;&lt;a href=&quot;#该文章整理了小薛白嫖壁纸的超香网站。&quot; class=&quot;headerlink&quot; title=&quot;该文章整理了小薛白嫖壁纸的超香网站。&quot;&gt;&lt;/a&gt;该文章整理了小薛白嫖壁纸的超香网站。&lt;/h4&gt;&lt;p&gt;经典，典中典</summary>
      
    
    
    
    
    <category term="网站收录" scheme="https://xiaowog.top/tags/%E7%BD%91%E7%AB%99%E6%94%B6%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>遇到的坑（1）</title>
    <link href="https://xiaowog.top/2022/01/30/%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%EF%BC%881%EF%BC%89/"/>
    <id>https://xiaowog.top/2022/01/30/%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%EF%BC%881%EF%BC%89/</id>
    <published>2022-01-30T11:07:25.000Z</published>
    <updated>2022-01-30T11:56:35.567Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基于Hexo和Github搭建的博客，手机端访问不了，怎么办？"><a href="#1-基于Hexo和Github搭建的博客，手机端访问不了，怎么办？" class="headerlink" title="1.基于Hexo和Github搭建的博客，手机端访问不了，怎么办？"></a>1.基于Hexo和Github搭建的博客，手机端访问不了，怎么办？</h3><p>因为是在国内，所以无论是访问Github还是Github所提供的服务都是不稳定的。电脑端能访问的原因大概率是因为科学上网的缘故，手机端无法访问是因为其拒绝了域名解析所用的ip地址。</p><p>解决方法：</p><p>重新ping一下你的GitHub项目的地址，打开命令提示符cmd，输入<em><strong>ping 仓库名</strong></em>，如下图：</p><p><img lazyload src="/images/loading.svg" data-src="hexo1.png" alt="1"></p><p>可以知道当前ip是185.199.109.153</p><p>然后到域名DNS解析中，添加A记录值为上述ping到的ip，到此可以解决了。</p><h3 id="2-Typora（Markdown）可以载入本地图片，而网页无法载入？"><a href="#2-Typora（Markdown）可以载入本地图片，而网页无法载入？" class="headerlink" title="2.Typora（Markdown）可以载入本地图片，而网页无法载入？"></a>2.Typora（Markdown）可以载入本地图片，而网页无法载入？</h3><p>原因：本地图片是靠相对路径载入的，而当上传网页时，它们的相对路径会发生改变。</p><p>解决方法：</p><p>在blog目录下打开git控制台，安装图片插件，输入<em><strong>npm install hexo-asset-image –save</strong></em>。</p><p>然后打开blog目录下的_config.yml文件，将<strong>post_asset_folder</strong>改为<strong>true</strong>。</p><p>然后重新new一个md文件，或者在原md文件处新建一个同名的文件夹来存放照片，将相对路径直接改成照片名，因为当你上传网页时，他们会被放入同一个文件夹。</p><p><img lazyload src="/images/loading.svg" data-src="hexo2.png" alt="2"></p><p>我也被上述问题困扰了一下午，网上的方法大部分不好使，当然也有提出别的备用方案，如用gitee代替github，采用图床的方法等等，但都不符合我的预期，所以做了这个博客希望能给各位提供帮助。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-基于Hexo和Github搭建的博客，手机端访问不了，怎么办？&quot;&gt;&lt;a href=&quot;#1-基于Hexo和Github搭建的博客，手机端访问不了，怎么办？&quot; class=&quot;headerlink&quot; title=&quot;1.基于Hexo和Github搭建的博客，手机端访问</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://xiaowog.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Github搭建个人博客（上）</title>
    <link href="https://xiaowog.top/2022/01/30/Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://xiaowog.top/2022/01/30/Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2022-01-30T07:02:09.000Z</published>
    <updated>2022-01-31T03:27:52.409Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a><strong>安装Node.js</strong></h3><p>先下载<a class="link" href="https://nodejs.org/en/download/">稳定版<i class="fas fa-external-link-alt"></i></a>（LTS），安装选项选默认（想改路径可以），一路Next。</p><p>安装好之后，按<strong>win+R</strong>输入<em><strong>cmd</strong></em>打开命令提示符，输入<em><strong>node -v</strong></em>和<em><strong>npm -v</strong></em>，如果出现版本号，则安装就完成了</p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a><strong>安装Git</strong></h3><p>为了把本地文件上传到Github上面去，我们需要分布式版本控制工具———<a class="link" href="https://git-scm.com/download/win">Git<i class="fas fa-external-link-alt"></i></a></p><p>安装选项还是默认，路径随意，安装完成之后，打开命令提示符，输入<em><strong>git -v</strong></em>，如果不报错，则证明安装成功。</p><h3 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a><strong>注册Github账号</strong></h3><p>打开<a class="link" href="https://github.com/">官网<i class="fas fa-external-link-alt"></i></a>，注册流程很简单，注册完成登录。</p><p>注意：网站有时不好使，因为是在国内访问的原因，如果无法打开，则等待几个小时后在去访问，或者有能力的可以了解科学上网（私聊博主可获取秘密武器哦）</p><p>新建一个项目，如图所示：</p><p><img lazyload src="/images/loading.svg" data-src="hexo1.png" alt="1"></p><p>输入项目名，名称一定要和你的GitHub名字一样，后面要加.github.io，README的初始化最好也点上，如图所示：</p><p><img lazyload src="/images/loading.svg" data-src="hexo2.png" alt="2"></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a><strong>安装Hexo</strong></h3><p>在一个合适的地方新建一个文件夹，用来存放自己的博客文件，在该目录下右击，点<strong>Git Bash Here</strong>，打开git控制台窗口，<u>以后我们所有的操作将都在git控制台进行</u>。在控制台中输入 <em><strong>npm i hexo-cli -g</strong></em> 安装Hexo。</p><p>安装完后输入<em><strong>hexo -v</strong></em>验证是否安装成功。</p><p>然后就要初始化我们的网站，输入<em><strong>hexo init blog</strong></em>初始化文件，接着输入<em><strong>cd blog</strong></em> ，然后输入<em><strong>npm install</strong></em>安装必备的组件。</p><p>这样本地的网站配置也弄好了，输入<em><strong>hexo g</strong></em>生成静态网页，然后输入<em><strong>hexo s</strong></em>打开本地服务器，然后浏览器访问<a class="link" href="http://localhost:4000/">http://localhost:4000/<i class="fas fa-external-link-alt"></i></a> ，就可以看到我们的熟悉的Hello World了，效果如下：</p><p><img lazyload src="/images/loading.svg" data-src="hexo3.png" alt="3"></p><p>返回控制台按<strong>ctrl+c</strong>关闭本地服务器</p><h3 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a><strong>连接Github与本地</strong></h3><p>首先在任意地方右击打开 <strong>Git Bash Here</strong>，然后输入下面的命令：</p><p><img lazyload src="/images/loading.svg" data-src="hexo4.png" alt="4"></p><p>注意：用户名和邮箱请修改成你GitHub的消息，name和email后有空格</p><p>输入如下命令，按三次回车，然后生成密钥SSH key</p><p><img lazyload src="/images/loading.svg" data-src="hexo5.png" alt="5"></p><p>然后到上面提示的地址里用记事本打开id_rsa.pub，复制里面的内容</p><p><img lazyload src="/images/loading.svg" data-src="hexo6.png" alt="6"></p><p>打开<a class="link" href="https://github.com/">GitHub<i class="fas fa-external-link-alt"></i></a> ，头像下面点击<strong>Setting</strong>，</p><p><img lazyload src="/images/loading.svg" data-src="hexo7.png" alt="7"></p><p>再点击<strong>SSH and GPG keys</strong>，新建一个SSH，名字随便起。</p><p><img lazyload src="/images/loading.svg" data-src="hexo8.png" alt="8"></p><p>然后将记事本复制的内容复制到框中，点击确认保存。</p><p><img lazyload src="/images/loading.svg" data-src="hexo9.png" alt="9"></p><p>然后到git控制台中输入<em><strong>ssh -T  <a class="link" href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#x62;&#x2e;&#99;&#x6f;&#x6d;">&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#x62;&#x2e;&#99;&#x6f;&#x6d;<i class="fas fa-external-link-alt"></i></a></strong></em>，第一次提示输入yes，然后如果出现你的用户名，那就成功了，如下图示。</p><p><img lazyload src="/images/loading.svg" data-src="hexo10.png" alt="10"></p><h3 id="配置并上传网站"><a href="#配置并上传网站" class="headerlink" title="配置并上传网站"></a><strong>配置并上传网站</strong></h3><p>打开博客目录下的**_config.yml**文件，这是博客的配置文件，在这里你可以修改博客的相关信息，现在，只修改最后一行配置：</p><p><img lazyload src="/images/loading.svg" data-src="hexo11.png" alt="11"></p><p>将<strong>respository</strong>修改为你自己的GitHub项目地址(ssh)。</p><p><img lazyload src="/images/loading.svg" data-src="hexo12.png" alt="12"></p><p>然后返回文件夹中右击打开git控制台，输入<em><strong>npm install hexo-deployer-git –save</strong></em>,安装git插件，</p><p>然后输入<em><strong>hexo g</strong></em>和<em><strong>hexo d</strong></em>上传到GitHub上。这是你打开你的io主页就能看到你上传的博客网站了。</p><p><img lazyload src="/images/loading.svg" data-src="hexo13.png" alt="13"></p><h3 id="绑定域名（没有可忽略，直接用io网址访问即可）"><a href="#绑定域名（没有可忽略，直接用io网址访问即可）" class="headerlink" title="绑定域名（没有可忽略，直接用io网址访问即可）"></a><strong>绑定域名（没有可忽略，直接用io网址访问即可）</strong></h3><p>想要更换域名，可以自己到卖域名的平台买个域名，XX云都能买。</p><p><img lazyload src="/images/loading.svg" data-src="hexo14.png" alt="14"></p><p>然后买完之后，点击解析，添加两条解析记录，第二条，主机记录为www，记录类型为CNAME，记录值为你GitHub项目page里的那个地址，然后第一条，主机记录为@，记录类型为A，记录值为你通过命令提示符窗口ping第二条记录值得到的ip！！</p><p><img lazyload src="/images/loading.svg" data-src="hexo15.png" alt="15"></p><p><img lazyload src="/images/loading.svg" data-src="hexo16.png" alt="16"></p><p>打开你本地博客目录中source文件夹，新建文本文件，然后在里面写上你的域名，保存，然后重命名删除后缀。最后运行<em><strong>hexo g</strong></em>和<em><strong>hexo d</strong></em>上传到github。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装Node-js&quot;&gt;&lt;a href=&quot;#安装Node-js&quot; class=&quot;headerlink&quot; title=&quot;安装Node.js&quot;&gt;&lt;/a&gt;&lt;strong&gt;安装Node.js&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;先下载&lt;a class=&quot;link&quot; href=&quot;</summary>
      
    
    
    
    
    <category term="hexo" scheme="https://xiaowog.top/tags/hexo/"/>
    
  </entry>
  
</feed>
